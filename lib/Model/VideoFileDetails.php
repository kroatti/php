<?php
/**
 * VideoFileDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VideoFileDetails Class Doc Comment
 *
 * @category Class
 * @description Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoFileDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VideoFileDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audio_streams' => '\Swagger\Client\Model\VideoFileDetailsAudioStream[]',
        'bitrate_bps' => 'string',
        'container' => 'string',
        'creation_time' => 'string',
        'duration_ms' => 'string',
        'file_name' => 'string',
        'file_size' => 'string',
        'file_type' => 'string',
        'video_streams' => '\Swagger\Client\Model\VideoFileDetailsVideoStream[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audio_streams' => null,
        'bitrate_bps' => 'uint64',
        'container' => null,
        'creation_time' => null,
        'duration_ms' => 'uint64',
        'file_name' => null,
        'file_size' => 'uint64',
        'file_type' => null,
        'video_streams' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_streams' => 'audioStreams',
        'bitrate_bps' => 'bitrateBps',
        'container' => 'container',
        'creation_time' => 'creationTime',
        'duration_ms' => 'durationMs',
        'file_name' => 'fileName',
        'file_size' => 'fileSize',
        'file_type' => 'fileType',
        'video_streams' => 'videoStreams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_streams' => 'setAudioStreams',
        'bitrate_bps' => 'setBitrateBps',
        'container' => 'setContainer',
        'creation_time' => 'setCreationTime',
        'duration_ms' => 'setDurationMs',
        'file_name' => 'setFileName',
        'file_size' => 'setFileSize',
        'file_type' => 'setFileType',
        'video_streams' => 'setVideoStreams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_streams' => 'getAudioStreams',
        'bitrate_bps' => 'getBitrateBps',
        'container' => 'getContainer',
        'creation_time' => 'getCreationTime',
        'duration_ms' => 'getDurationMs',
        'file_name' => 'getFileName',
        'file_size' => 'getFileSize',
        'file_type' => 'getFileType',
        'video_streams' => 'getVideoStreams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FILE_TYPE_ARCHIVE = 'archive';
    const FILE_TYPE_AUDIO = 'audio';
    const FILE_TYPE_DOCUMENT = 'document';
    const FILE_TYPE_IMAGE = 'image';
    const FILE_TYPE_OTHER = 'other';
    const FILE_TYPE_PROJECT = 'project';
    const FILE_TYPE_VIDEO = 'video';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_ARCHIVE,
            self::FILE_TYPE_AUDIO,
            self::FILE_TYPE_DOCUMENT,
            self::FILE_TYPE_IMAGE,
            self::FILE_TYPE_OTHER,
            self::FILE_TYPE_PROJECT,
            self::FILE_TYPE_VIDEO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_streams'] = isset($data['audio_streams']) ? $data['audio_streams'] : null;
        $this->container['bitrate_bps'] = isset($data['bitrate_bps']) ? $data['bitrate_bps'] : null;
        $this->container['container'] = isset($data['container']) ? $data['container'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['duration_ms'] = isset($data['duration_ms']) ? $data['duration_ms'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['video_streams'] = isset($data['video_streams']) ? $data['video_streams'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($this->container['file_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($this->container['file_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets audio_streams
     *
     * @return \Swagger\Client\Model\VideoFileDetailsAudioStream[]
     */
    public function getAudioStreams()
    {
        return $this->container['audio_streams'];
    }

    /**
     * Sets audio_streams
     *
     * @param \Swagger\Client\Model\VideoFileDetailsAudioStream[] $audio_streams A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
     *
     * @return $this
     */
    public function setAudioStreams($audio_streams)
    {
        $this->container['audio_streams'] = $audio_streams;

        return $this;
    }

    /**
     * Gets bitrate_bps
     *
     * @return string
     */
    public function getBitrateBps()
    {
        return $this->container['bitrate_bps'];
    }

    /**
     * Sets bitrate_bps
     *
     * @param string $bitrate_bps The uploaded video file's combined (video and audio) bitrate in bits per second.
     *
     * @return $this
     */
    public function setBitrateBps($bitrate_bps)
    {
        $this->container['bitrate_bps'] = $bitrate_bps;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string $container The uploaded video file's container format.
     *
     * @return $this
     */
    public function setContainer($container)
    {
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets duration_ms
     *
     * @return string
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param string $duration_ms The length of the uploaded video in milliseconds.
     *
     * @return $this
     */
    public function setDurationMs($duration_ms)
    {
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return string
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param string $file_size The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($file_type) && !in_array($file_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets video_streams
     *
     * @return \Swagger\Client\Model\VideoFileDetailsVideoStream[]
     */
    public function getVideoStreams()
    {
        return $this->container['video_streams'];
    }

    /**
     * Sets video_streams
     *
     * @param \Swagger\Client\Model\VideoFileDetailsVideoStream[] $video_streams A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
     *
     * @return $this
     */
    public function setVideoStreams($video_streams)
    {
        $this->container['video_streams'] = $video_streams;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


