<?php
/**
 * LiveStreamConfigurationIssue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveStreamConfigurationIssue Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveStreamConfigurationIssue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiveStreamConfigurationIssue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'reason' => 'string',
        'severity' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'reason' => null,
        'severity' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'reason' => 'reason',
        'severity' => 'severity',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'reason' => 'setReason',
        'severity' => 'setSeverity',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'reason' => 'getReason',
        'severity' => 'getSeverity',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEVERITY_ERROR = 'error';
    const SEVERITY_INFO = 'info';
    const SEVERITY_WARNING = 'warning';
    const TYPE_AUDIO_BITRATE_HIGH = 'audioBitrateHigh';
    const TYPE_AUDIO_BITRATE_LOW = 'audioBitrateLow';
    const TYPE_AUDIO_BITRATE_MISMATCH = 'audioBitrateMismatch';
    const TYPE_AUDIO_CODEC = 'audioCodec';
    const TYPE_AUDIO_CODEC_MISMATCH = 'audioCodecMismatch';
    const TYPE_AUDIO_SAMPLE_RATE = 'audioSampleRate';
    const TYPE_AUDIO_SAMPLE_RATE_MISMATCH = 'audioSampleRateMismatch';
    const TYPE_AUDIO_STEREO_MISMATCH = 'audioStereoMismatch';
    const TYPE_AUDIO_TOO_MANY_CHANNELS = 'audioTooManyChannels';
    const TYPE_BAD_CONTAINER = 'badContainer';
    const TYPE_BITRATE_HIGH = 'bitrateHigh';
    const TYPE_BITRATE_LOW = 'bitrateLow';
    const TYPE_FRAME_RATE_HIGH = 'frameRateHigh';
    const TYPE_FRAMERATE_MISMATCH = 'framerateMismatch';
    const TYPE_GOP_MISMATCH = 'gopMismatch';
    const TYPE_GOP_SIZE_LONG = 'gopSizeLong';
    const TYPE_GOP_SIZE_OVER = 'gopSizeOver';
    const TYPE_GOP_SIZE_SHORT = 'gopSizeShort';
    const TYPE_INTERLACED_VIDEO = 'interlacedVideo';
    const TYPE_MULTIPLE_AUDIO_STREAMS = 'multipleAudioStreams';
    const TYPE_MULTIPLE_VIDEO_STREAMS = 'multipleVideoStreams';
    const TYPE_NO_AUDIO_STREAM = 'noAudioStream';
    const TYPE_NO_VIDEO_STREAM = 'noVideoStream';
    const TYPE_OPEN_GOP = 'openGop';
    const TYPE_RESOLUTION_MISMATCH = 'resolutionMismatch';
    const TYPE_VIDEO_BITRATE_MISMATCH = 'videoBitrateMismatch';
    const TYPE_VIDEO_CODEC = 'videoCodec';
    const TYPE_VIDEO_CODEC_MISMATCH = 'videoCodecMismatch';
    const TYPE_VIDEO_INGESTION_FASTER_THAN_REALTIME = 'videoIngestionFasterThanRealtime';
    const TYPE_VIDEO_INGESTION_STARVED = 'videoIngestionStarved';
    const TYPE_VIDEO_INTERLACE_MISMATCH = 'videoInterlaceMismatch';
    const TYPE_VIDEO_PROFILE_MISMATCH = 'videoProfileMismatch';
    const TYPE_VIDEO_RESOLUTION_SUBOPTIMAL = 'videoResolutionSuboptimal';
    const TYPE_VIDEO_RESOLUTION_UNSUPPORTED = 'videoResolutionUnsupported';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_ERROR,
            self::SEVERITY_INFO,
            self::SEVERITY_WARNING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUDIO_BITRATE_HIGH,
            self::TYPE_AUDIO_BITRATE_LOW,
            self::TYPE_AUDIO_BITRATE_MISMATCH,
            self::TYPE_AUDIO_CODEC,
            self::TYPE_AUDIO_CODEC_MISMATCH,
            self::TYPE_AUDIO_SAMPLE_RATE,
            self::TYPE_AUDIO_SAMPLE_RATE_MISMATCH,
            self::TYPE_AUDIO_STEREO_MISMATCH,
            self::TYPE_AUDIO_TOO_MANY_CHANNELS,
            self::TYPE_BAD_CONTAINER,
            self::TYPE_BITRATE_HIGH,
            self::TYPE_BITRATE_LOW,
            self::TYPE_FRAME_RATE_HIGH,
            self::TYPE_FRAMERATE_MISMATCH,
            self::TYPE_GOP_MISMATCH,
            self::TYPE_GOP_SIZE_LONG,
            self::TYPE_GOP_SIZE_OVER,
            self::TYPE_GOP_SIZE_SHORT,
            self::TYPE_INTERLACED_VIDEO,
            self::TYPE_MULTIPLE_AUDIO_STREAMS,
            self::TYPE_MULTIPLE_VIDEO_STREAMS,
            self::TYPE_NO_AUDIO_STREAM,
            self::TYPE_NO_VIDEO_STREAM,
            self::TYPE_OPEN_GOP,
            self::TYPE_RESOLUTION_MISMATCH,
            self::TYPE_VIDEO_BITRATE_MISMATCH,
            self::TYPE_VIDEO_CODEC,
            self::TYPE_VIDEO_CODEC_MISMATCH,
            self::TYPE_VIDEO_INGESTION_FASTER_THAN_REALTIME,
            self::TYPE_VIDEO_INGESTION_STARVED,
            self::TYPE_VIDEO_INTERLACE_MISMATCH,
            self::TYPE_VIDEO_PROFILE_MISMATCH,
            self::TYPE_VIDEO_RESOLUTION_SUBOPTIMAL,
            self::TYPE_VIDEO_RESOLUTION_UNSUPPORTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSeverityAllowableValues();
        if (!in_array($this->container['severity'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getSeverityAllowableValues();
        if (!in_array($this->container['severity'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The long-form description of the issue and how to resolve it.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The short-form reason for this issue.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity How severe this issue is to the stream.
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The kind of error happening.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


