<?php
/**
 * LiveChatMessageAuthorDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveChatMessageAuthorDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveChatMessageAuthorDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiveChatMessageAuthorDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_id' => 'string',
        'channel_url' => 'string',
        'display_name' => 'string',
        'is_chat_moderator' => 'bool',
        'is_chat_owner' => 'bool',
        'is_chat_sponsor' => 'bool',
        'is_verified' => 'bool',
        'profile_image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel_id' => null,
        'channel_url' => null,
        'display_name' => null,
        'is_chat_moderator' => null,
        'is_chat_owner' => null,
        'is_chat_sponsor' => null,
        'is_verified' => null,
        'profile_image_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_id' => 'channelId',
        'channel_url' => 'channelUrl',
        'display_name' => 'displayName',
        'is_chat_moderator' => 'isChatModerator',
        'is_chat_owner' => 'isChatOwner',
        'is_chat_sponsor' => 'isChatSponsor',
        'is_verified' => 'isVerified',
        'profile_image_url' => 'profileImageUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_id' => 'setChannelId',
        'channel_url' => 'setChannelUrl',
        'display_name' => 'setDisplayName',
        'is_chat_moderator' => 'setIsChatModerator',
        'is_chat_owner' => 'setIsChatOwner',
        'is_chat_sponsor' => 'setIsChatSponsor',
        'is_verified' => 'setIsVerified',
        'profile_image_url' => 'setProfileImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_id' => 'getChannelId',
        'channel_url' => 'getChannelUrl',
        'display_name' => 'getDisplayName',
        'is_chat_moderator' => 'getIsChatModerator',
        'is_chat_owner' => 'getIsChatOwner',
        'is_chat_sponsor' => 'getIsChatSponsor',
        'is_verified' => 'getIsVerified',
        'profile_image_url' => 'getProfileImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel_url'] = isset($data['channel_url']) ? $data['channel_url'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['is_chat_moderator'] = isset($data['is_chat_moderator']) ? $data['is_chat_moderator'] : null;
        $this->container['is_chat_owner'] = isset($data['is_chat_owner']) ? $data['is_chat_owner'] : null;
        $this->container['is_chat_sponsor'] = isset($data['is_chat_sponsor']) ? $data['is_chat_sponsor'] : null;
        $this->container['is_verified'] = isset($data['is_verified']) ? $data['is_verified'] : null;
        $this->container['profile_image_url'] = isset($data['profile_image_url']) ? $data['profile_image_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id The YouTube channel ID.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url The channel's URL.
     *
     * @return $this
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The channel's display name.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_chat_moderator
     *
     * @return bool
     */
    public function getIsChatModerator()
    {
        return $this->container['is_chat_moderator'];
    }

    /**
     * Sets is_chat_moderator
     *
     * @param bool $is_chat_moderator Whether the author is a moderator of the live chat.
     *
     * @return $this
     */
    public function setIsChatModerator($is_chat_moderator)
    {
        $this->container['is_chat_moderator'] = $is_chat_moderator;

        return $this;
    }

    /**
     * Gets is_chat_owner
     *
     * @return bool
     */
    public function getIsChatOwner()
    {
        return $this->container['is_chat_owner'];
    }

    /**
     * Sets is_chat_owner
     *
     * @param bool $is_chat_owner Whether the author is the owner of the live chat.
     *
     * @return $this
     */
    public function setIsChatOwner($is_chat_owner)
    {
        $this->container['is_chat_owner'] = $is_chat_owner;

        return $this;
    }

    /**
     * Gets is_chat_sponsor
     *
     * @return bool
     */
    public function getIsChatSponsor()
    {
        return $this->container['is_chat_sponsor'];
    }

    /**
     * Sets is_chat_sponsor
     *
     * @param bool $is_chat_sponsor Whether the author is a sponsor of the live chat.
     *
     * @return $this
     */
    public function setIsChatSponsor($is_chat_sponsor)
    {
        $this->container['is_chat_sponsor'] = $is_chat_sponsor;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool $is_verified Whether the author's identity has been verified by YouTube.
     *
     * @return $this
     */
    public function setIsVerified($is_verified)
    {
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets profile_image_url
     *
     * @return string
     */
    public function getProfileImageUrl()
    {
        return $this->container['profile_image_url'];
    }

    /**
     * Sets profile_image_url
     *
     * @param string $profile_image_url The channels's avatar URL.
     *
     * @return $this
     */
    public function setProfileImageUrl($profile_image_url)
    {
        $this->container['profile_image_url'] = $profile_image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


