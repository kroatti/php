<?php
/**
 * CommentSnippet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CommentSnippet Class Doc Comment
 *
 * @category Class
 * @description Basic details about a comment, such as its author and text.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentSnippet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommentSnippet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'author_channel_id' => '',
        'author_channel_url' => 'string',
        'author_display_name' => 'string',
        'author_profile_image_url' => 'string',
        'can_rate' => 'bool',
        'channel_id' => 'string',
        'like_count' => 'int',
        'moderation_status' => 'string',
        'parent_id' => 'string',
        'published_at' => '\DateTime',
        'text_display' => 'string',
        'text_original' => 'string',
        'updated_at' => '\DateTime',
        'video_id' => 'string',
        'viewer_rating' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'author_channel_id' => null,
        'author_channel_url' => null,
        'author_display_name' => null,
        'author_profile_image_url' => null,
        'can_rate' => null,
        'channel_id' => null,
        'like_count' => 'uint32',
        'moderation_status' => null,
        'parent_id' => null,
        'published_at' => 'date-time',
        'text_display' => null,
        'text_original' => null,
        'updated_at' => 'date-time',
        'video_id' => null,
        'viewer_rating' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author_channel_id' => 'authorChannelId',
        'author_channel_url' => 'authorChannelUrl',
        'author_display_name' => 'authorDisplayName',
        'author_profile_image_url' => 'authorProfileImageUrl',
        'can_rate' => 'canRate',
        'channel_id' => 'channelId',
        'like_count' => 'likeCount',
        'moderation_status' => 'moderationStatus',
        'parent_id' => 'parentId',
        'published_at' => 'publishedAt',
        'text_display' => 'textDisplay',
        'text_original' => 'textOriginal',
        'updated_at' => 'updatedAt',
        'video_id' => 'videoId',
        'viewer_rating' => 'viewerRating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author_channel_id' => 'setAuthorChannelId',
        'author_channel_url' => 'setAuthorChannelUrl',
        'author_display_name' => 'setAuthorDisplayName',
        'author_profile_image_url' => 'setAuthorProfileImageUrl',
        'can_rate' => 'setCanRate',
        'channel_id' => 'setChannelId',
        'like_count' => 'setLikeCount',
        'moderation_status' => 'setModerationStatus',
        'parent_id' => 'setParentId',
        'published_at' => 'setPublishedAt',
        'text_display' => 'setTextDisplay',
        'text_original' => 'setTextOriginal',
        'updated_at' => 'setUpdatedAt',
        'video_id' => 'setVideoId',
        'viewer_rating' => 'setViewerRating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author_channel_id' => 'getAuthorChannelId',
        'author_channel_url' => 'getAuthorChannelUrl',
        'author_display_name' => 'getAuthorDisplayName',
        'author_profile_image_url' => 'getAuthorProfileImageUrl',
        'can_rate' => 'getCanRate',
        'channel_id' => 'getChannelId',
        'like_count' => 'getLikeCount',
        'moderation_status' => 'getModerationStatus',
        'parent_id' => 'getParentId',
        'published_at' => 'getPublishedAt',
        'text_display' => 'getTextDisplay',
        'text_original' => 'getTextOriginal',
        'updated_at' => 'getUpdatedAt',
        'video_id' => 'getVideoId',
        'viewer_rating' => 'getViewerRating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODERATION_STATUS_HELD_FOR_REVIEW = 'heldForReview';
    const MODERATION_STATUS_LIKELY_SPAM = 'likelySpam';
    const MODERATION_STATUS_PUBLISHED = 'published';
    const MODERATION_STATUS_REJECTED = 'rejected';
    const VIEWER_RATING_DISLIKE = 'dislike';
    const VIEWER_RATING_LIKE = 'like';
    const VIEWER_RATING_NONE = 'none';
    const VIEWER_RATING_UNSPECIFIED = 'unspecified';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModerationStatusAllowableValues()
    {
        return [
            self::MODERATION_STATUS_HELD_FOR_REVIEW,
            self::MODERATION_STATUS_LIKELY_SPAM,
            self::MODERATION_STATUS_PUBLISHED,
            self::MODERATION_STATUS_REJECTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewerRatingAllowableValues()
    {
        return [
            self::VIEWER_RATING_DISLIKE,
            self::VIEWER_RATING_LIKE,
            self::VIEWER_RATING_NONE,
            self::VIEWER_RATING_UNSPECIFIED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author_channel_id'] = isset($data['author_channel_id']) ? $data['author_channel_id'] : null;
        $this->container['author_channel_url'] = isset($data['author_channel_url']) ? $data['author_channel_url'] : null;
        $this->container['author_display_name'] = isset($data['author_display_name']) ? $data['author_display_name'] : null;
        $this->container['author_profile_image_url'] = isset($data['author_profile_image_url']) ? $data['author_profile_image_url'] : null;
        $this->container['can_rate'] = isset($data['can_rate']) ? $data['can_rate'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['like_count'] = isset($data['like_count']) ? $data['like_count'] : null;
        $this->container['moderation_status'] = isset($data['moderation_status']) ? $data['moderation_status'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['text_display'] = isset($data['text_display']) ? $data['text_display'] : null;
        $this->container['text_original'] = isset($data['text_original']) ? $data['text_original'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['video_id'] = isset($data['video_id']) ? $data['video_id'] : null;
        $this->container['viewer_rating'] = isset($data['viewer_rating']) ? $data['viewer_rating'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModerationStatusAllowableValues();
        if (!in_array($this->container['moderation_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'moderation_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewerRatingAllowableValues();
        if (!in_array($this->container['viewer_rating'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'viewer_rating', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getModerationStatusAllowableValues();
        if (!in_array($this->container['moderation_status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getViewerRatingAllowableValues();
        if (!in_array($this->container['viewer_rating'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets author_channel_id
     *
     * @return 
     */
    public function getAuthorChannelId()
    {
        return $this->container['author_channel_id'];
    }

    /**
     * Sets author_channel_id
     *
     * @param  $author_channel_id The id of the author's YouTube channel, if any.
     *
     * @return $this
     */
    public function setAuthorChannelId($author_channel_id)
    {
        $this->container['author_channel_id'] = $author_channel_id;

        return $this;
    }

    /**
     * Gets author_channel_url
     *
     * @return string
     */
    public function getAuthorChannelUrl()
    {
        return $this->container['author_channel_url'];
    }

    /**
     * Sets author_channel_url
     *
     * @param string $author_channel_url Link to the author's YouTube channel, if any.
     *
     * @return $this
     */
    public function setAuthorChannelUrl($author_channel_url)
    {
        $this->container['author_channel_url'] = $author_channel_url;

        return $this;
    }

    /**
     * Gets author_display_name
     *
     * @return string
     */
    public function getAuthorDisplayName()
    {
        return $this->container['author_display_name'];
    }

    /**
     * Sets author_display_name
     *
     * @param string $author_display_name The name of the user who posted the comment.
     *
     * @return $this
     */
    public function setAuthorDisplayName($author_display_name)
    {
        $this->container['author_display_name'] = $author_display_name;

        return $this;
    }

    /**
     * Gets author_profile_image_url
     *
     * @return string
     */
    public function getAuthorProfileImageUrl()
    {
        return $this->container['author_profile_image_url'];
    }

    /**
     * Sets author_profile_image_url
     *
     * @param string $author_profile_image_url The URL for the avatar of the user who posted the comment.
     *
     * @return $this
     */
    public function setAuthorProfileImageUrl($author_profile_image_url)
    {
        $this->container['author_profile_image_url'] = $author_profile_image_url;

        return $this;
    }

    /**
     * Gets can_rate
     *
     * @return bool
     */
    public function getCanRate()
    {
        return $this->container['can_rate'];
    }

    /**
     * Sets can_rate
     *
     * @param bool $can_rate Whether the current viewer can rate this comment.
     *
     * @return $this
     */
    public function setCanRate($can_rate)
    {
        $this->container['can_rate'] = $can_rate;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets like_count
     *
     * @return int
     */
    public function getLikeCount()
    {
        return $this->container['like_count'];
    }

    /**
     * Sets like_count
     *
     * @param int $like_count The total number of likes this comment has received.
     *
     * @return $this
     */
    public function setLikeCount($like_count)
    {
        $this->container['like_count'] = $like_count;

        return $this;
    }

    /**
     * Gets moderation_status
     *
     * @return string
     */
    public function getModerationStatus()
    {
        return $this->container['moderation_status'];
    }

    /**
     * Sets moderation_status
     *
     * @param string $moderation_status The comment's moderation status. Will not be set if the comments were requested through the id filter.
     *
     * @return $this
     */
    public function setModerationStatus($moderation_status)
    {
        $allowedValues = $this->getModerationStatusAllowableValues();
        if (!is_null($moderation_status) && !in_array($moderation_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'moderation_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moderation_status'] = $moderation_status;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id The unique id of the parent comment, only set for replies.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime $published_at The date and time when the comment was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets text_display
     *
     * @return string
     */
    public function getTextDisplay()
    {
        return $this->container['text_display'];
    }

    /**
     * Sets text_display
     *
     * @param string $text_display The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
     *
     * @return $this
     */
    public function setTextDisplay($text_display)
    {
        $this->container['text_display'] = $text_display;

        return $this;
    }

    /**
     * Gets text_original
     *
     * @return string
     */
    public function getTextOriginal()
    {
        return $this->container['text_original'];
    }

    /**
     * Sets text_original
     *
     * @param string $text_original The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
     *
     * @return $this
     */
    public function setTextOriginal($text_original)
    {
        $this->container['text_original'] = $text_original;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date and time when was last updated . The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets video_id
     *
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['video_id'];
    }

    /**
     * Sets video_id
     *
     * @param string $video_id The ID of the video the comment refers to, if any.
     *
     * @return $this
     */
    public function setVideoId($video_id)
    {
        $this->container['video_id'] = $video_id;

        return $this;
    }

    /**
     * Gets viewer_rating
     *
     * @return string
     */
    public function getViewerRating()
    {
        return $this->container['viewer_rating'];
    }

    /**
     * Sets viewer_rating
     *
     * @param string $viewer_rating The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
     *
     * @return $this
     */
    public function setViewerRating($viewer_rating)
    {
        $allowedValues = $this->getViewerRatingAllowableValues();
        if (!is_null($viewer_rating) && !in_array($viewer_rating, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'viewer_rating', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['viewer_rating'] = $viewer_rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


