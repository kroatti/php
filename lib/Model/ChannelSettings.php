<?php
/**
 * ChannelSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelSettings Class Doc Comment
 *
 * @category Class
 * @description Branding properties for the channel view.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'default_language' => 'string',
        'default_tab' => 'string',
        'description' => 'string',
        'featured_channels_title' => 'string',
        'featured_channels_urls' => 'string[]',
        'keywords' => 'string',
        'moderate_comments' => 'bool',
        'profile_color' => 'string',
        'show_browse_view' => 'bool',
        'show_related_channels' => 'bool',
        'title' => 'string',
        'tracking_analytics_account_id' => 'string',
        'unsubscribed_trailer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
        'default_language' => null,
        'default_tab' => null,
        'description' => null,
        'featured_channels_title' => null,
        'featured_channels_urls' => null,
        'keywords' => null,
        'moderate_comments' => null,
        'profile_color' => null,
        'show_browse_view' => null,
        'show_related_channels' => null,
        'title' => null,
        'tracking_analytics_account_id' => null,
        'unsubscribed_trailer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'default_language' => 'defaultLanguage',
        'default_tab' => 'defaultTab',
        'description' => 'description',
        'featured_channels_title' => 'featuredChannelsTitle',
        'featured_channels_urls' => 'featuredChannelsUrls',
        'keywords' => 'keywords',
        'moderate_comments' => 'moderateComments',
        'profile_color' => 'profileColor',
        'show_browse_view' => 'showBrowseView',
        'show_related_channels' => 'showRelatedChannels',
        'title' => 'title',
        'tracking_analytics_account_id' => 'trackingAnalyticsAccountId',
        'unsubscribed_trailer' => 'unsubscribedTrailer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'default_language' => 'setDefaultLanguage',
        'default_tab' => 'setDefaultTab',
        'description' => 'setDescription',
        'featured_channels_title' => 'setFeaturedChannelsTitle',
        'featured_channels_urls' => 'setFeaturedChannelsUrls',
        'keywords' => 'setKeywords',
        'moderate_comments' => 'setModerateComments',
        'profile_color' => 'setProfileColor',
        'show_browse_view' => 'setShowBrowseView',
        'show_related_channels' => 'setShowRelatedChannels',
        'title' => 'setTitle',
        'tracking_analytics_account_id' => 'setTrackingAnalyticsAccountId',
        'unsubscribed_trailer' => 'setUnsubscribedTrailer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'default_language' => 'getDefaultLanguage',
        'default_tab' => 'getDefaultTab',
        'description' => 'getDescription',
        'featured_channels_title' => 'getFeaturedChannelsTitle',
        'featured_channels_urls' => 'getFeaturedChannelsUrls',
        'keywords' => 'getKeywords',
        'moderate_comments' => 'getModerateComments',
        'profile_color' => 'getProfileColor',
        'show_browse_view' => 'getShowBrowseView',
        'show_related_channels' => 'getShowRelatedChannels',
        'title' => 'getTitle',
        'tracking_analytics_account_id' => 'getTrackingAnalyticsAccountId',
        'unsubscribed_trailer' => 'getUnsubscribedTrailer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['default_language'] = isset($data['default_language']) ? $data['default_language'] : null;
        $this->container['default_tab'] = isset($data['default_tab']) ? $data['default_tab'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['featured_channels_title'] = isset($data['featured_channels_title']) ? $data['featured_channels_title'] : null;
        $this->container['featured_channels_urls'] = isset($data['featured_channels_urls']) ? $data['featured_channels_urls'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['moderate_comments'] = isset($data['moderate_comments']) ? $data['moderate_comments'] : null;
        $this->container['profile_color'] = isset($data['profile_color']) ? $data['profile_color'] : null;
        $this->container['show_browse_view'] = isset($data['show_browse_view']) ? $data['show_browse_view'] : null;
        $this->container['show_related_channels'] = isset($data['show_related_channels']) ? $data['show_related_channels'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['tracking_analytics_account_id'] = isset($data['tracking_analytics_account_id']) ? $data['tracking_analytics_account_id'] : null;
        $this->container['unsubscribed_trailer'] = isset($data['unsubscribed_trailer']) ? $data['unsubscribed_trailer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the channel.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string $default_language default_language
     *
     * @return $this
     */
    public function setDefaultLanguage($default_language)
    {
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets default_tab
     *
     * @return string
     */
    public function getDefaultTab()
    {
        return $this->container['default_tab'];
    }

    /**
     * Sets default_tab
     *
     * @param string $default_tab Which content tab users should see when viewing the channel.
     *
     * @return $this
     */
    public function setDefaultTab($default_tab)
    {
        $this->container['default_tab'] = $default_tab;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Specifies the channel description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets featured_channels_title
     *
     * @return string
     */
    public function getFeaturedChannelsTitle()
    {
        return $this->container['featured_channels_title'];
    }

    /**
     * Sets featured_channels_title
     *
     * @param string $featured_channels_title Title for the featured channels tab.
     *
     * @return $this
     */
    public function setFeaturedChannelsTitle($featured_channels_title)
    {
        $this->container['featured_channels_title'] = $featured_channels_title;

        return $this;
    }

    /**
     * Gets featured_channels_urls
     *
     * @return string[]
     */
    public function getFeaturedChannelsUrls()
    {
        return $this->container['featured_channels_urls'];
    }

    /**
     * Sets featured_channels_urls
     *
     * @param string[] $featured_channels_urls The list of featured channels.
     *
     * @return $this
     */
    public function setFeaturedChannelsUrls($featured_channels_urls)
    {
        $this->container['featured_channels_urls'] = $featured_channels_urls;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string $keywords Lists keywords associated with the channel, comma-separated.
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets moderate_comments
     *
     * @return bool
     */
    public function getModerateComments()
    {
        return $this->container['moderate_comments'];
    }

    /**
     * Sets moderate_comments
     *
     * @param bool $moderate_comments Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
     *
     * @return $this
     */
    public function setModerateComments($moderate_comments)
    {
        $this->container['moderate_comments'] = $moderate_comments;

        return $this;
    }

    /**
     * Gets profile_color
     *
     * @return string
     */
    public function getProfileColor()
    {
        return $this->container['profile_color'];
    }

    /**
     * Sets profile_color
     *
     * @param string $profile_color A prominent color that can be rendered on this channel page.
     *
     * @return $this
     */
    public function setProfileColor($profile_color)
    {
        $this->container['profile_color'] = $profile_color;

        return $this;
    }

    /**
     * Gets show_browse_view
     *
     * @return bool
     */
    public function getShowBrowseView()
    {
        return $this->container['show_browse_view'];
    }

    /**
     * Sets show_browse_view
     *
     * @param bool $show_browse_view Whether the tab to browse the videos should be displayed.
     *
     * @return $this
     */
    public function setShowBrowseView($show_browse_view)
    {
        $this->container['show_browse_view'] = $show_browse_view;

        return $this;
    }

    /**
     * Gets show_related_channels
     *
     * @return bool
     */
    public function getShowRelatedChannels()
    {
        return $this->container['show_related_channels'];
    }

    /**
     * Sets show_related_channels
     *
     * @param bool $show_related_channels Whether related channels should be proposed.
     *
     * @return $this
     */
    public function setShowRelatedChannels($show_related_channels)
    {
        $this->container['show_related_channels'] = $show_related_channels;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Specifies the channel title.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tracking_analytics_account_id
     *
     * @return string
     */
    public function getTrackingAnalyticsAccountId()
    {
        return $this->container['tracking_analytics_account_id'];
    }

    /**
     * Sets tracking_analytics_account_id
     *
     * @param string $tracking_analytics_account_id The ID for a Google Analytics account to track and measure traffic to the channels.
     *
     * @return $this
     */
    public function setTrackingAnalyticsAccountId($tracking_analytics_account_id)
    {
        $this->container['tracking_analytics_account_id'] = $tracking_analytics_account_id;

        return $this;
    }

    /**
     * Gets unsubscribed_trailer
     *
     * @return string
     */
    public function getUnsubscribedTrailer()
    {
        return $this->container['unsubscribed_trailer'];
    }

    /**
     * Sets unsubscribed_trailer
     *
     * @param string $unsubscribed_trailer The trailer of the channel, for users that are not subscribers.
     *
     * @return $this
     */
    public function setUnsubscribedTrailer($unsubscribed_trailer)
    {
        $this->container['unsubscribed_trailer'] = $unsubscribed_trailer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


