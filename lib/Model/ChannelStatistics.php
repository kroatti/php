<?php
/**
 * ChannelStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelStatistics Class Doc Comment
 *
 * @category Class
 * @description Statistics about a channel: number of subscribers, number of videos in the channel, etc.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comment_count' => 'string',
        'hidden_subscriber_count' => 'bool',
        'subscriber_count' => 'string',
        'video_count' => 'string',
        'view_count' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comment_count' => 'uint64',
        'hidden_subscriber_count' => null,
        'subscriber_count' => 'uint64',
        'video_count' => 'uint64',
        'view_count' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment_count' => 'commentCount',
        'hidden_subscriber_count' => 'hiddenSubscriberCount',
        'subscriber_count' => 'subscriberCount',
        'video_count' => 'videoCount',
        'view_count' => 'viewCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment_count' => 'setCommentCount',
        'hidden_subscriber_count' => 'setHiddenSubscriberCount',
        'subscriber_count' => 'setSubscriberCount',
        'video_count' => 'setVideoCount',
        'view_count' => 'setViewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment_count' => 'getCommentCount',
        'hidden_subscriber_count' => 'getHiddenSubscriberCount',
        'subscriber_count' => 'getSubscriberCount',
        'video_count' => 'getVideoCount',
        'view_count' => 'getViewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comment_count'] = isset($data['comment_count']) ? $data['comment_count'] : null;
        $this->container['hidden_subscriber_count'] = isset($data['hidden_subscriber_count']) ? $data['hidden_subscriber_count'] : null;
        $this->container['subscriber_count'] = isset($data['subscriber_count']) ? $data['subscriber_count'] : null;
        $this->container['video_count'] = isset($data['video_count']) ? $data['video_count'] : null;
        $this->container['view_count'] = isset($data['view_count']) ? $data['view_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets comment_count
     *
     * @return string
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param string $comment_count The number of comments for the channel.
     *
     * @return $this
     */
    public function setCommentCount($comment_count)
    {
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets hidden_subscriber_count
     *
     * @return bool
     */
    public function getHiddenSubscriberCount()
    {
        return $this->container['hidden_subscriber_count'];
    }

    /**
     * Sets hidden_subscriber_count
     *
     * @param bool $hidden_subscriber_count Whether or not the number of subscribers is shown for this user.
     *
     * @return $this
     */
    public function setHiddenSubscriberCount($hidden_subscriber_count)
    {
        $this->container['hidden_subscriber_count'] = $hidden_subscriber_count;

        return $this;
    }

    /**
     * Gets subscriber_count
     *
     * @return string
     */
    public function getSubscriberCount()
    {
        return $this->container['subscriber_count'];
    }

    /**
     * Sets subscriber_count
     *
     * @param string $subscriber_count The number of subscribers that the channel has.
     *
     * @return $this
     */
    public function setSubscriberCount($subscriber_count)
    {
        $this->container['subscriber_count'] = $subscriber_count;

        return $this;
    }

    /**
     * Gets video_count
     *
     * @return string
     */
    public function getVideoCount()
    {
        return $this->container['video_count'];
    }

    /**
     * Sets video_count
     *
     * @param string $video_count The number of videos uploaded to the channel.
     *
     * @return $this
     */
    public function setVideoCount($video_count)
    {
        $this->container['video_count'] = $video_count;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return string
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param string $view_count The number of times the channel has been viewed.
     *
     * @return $this
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


