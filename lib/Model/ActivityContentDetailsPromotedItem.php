<?php
/**
 * ActivityContentDetailsPromotedItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ActivityContentDetailsPromotedItem Class Doc Comment
 *
 * @category Class
 * @description Details about a resource which is being promoted.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityContentDetailsPromotedItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivityContentDetailsPromotedItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ad_tag' => 'string',
        'click_tracking_url' => 'string',
        'creative_view_url' => 'string',
        'cta_type' => 'string',
        'custom_cta_button_text' => 'string',
        'description_text' => 'string',
        'destination_url' => 'string',
        'forecasting_url' => 'string[]',
        'impression_url' => 'string[]',
        'video_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ad_tag' => null,
        'click_tracking_url' => null,
        'creative_view_url' => null,
        'cta_type' => null,
        'custom_cta_button_text' => null,
        'description_text' => null,
        'destination_url' => null,
        'forecasting_url' => null,
        'impression_url' => null,
        'video_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ad_tag' => 'adTag',
        'click_tracking_url' => 'clickTrackingUrl',
        'creative_view_url' => 'creativeViewUrl',
        'cta_type' => 'ctaType',
        'custom_cta_button_text' => 'customCtaButtonText',
        'description_text' => 'descriptionText',
        'destination_url' => 'destinationUrl',
        'forecasting_url' => 'forecastingUrl',
        'impression_url' => 'impressionUrl',
        'video_id' => 'videoId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ad_tag' => 'setAdTag',
        'click_tracking_url' => 'setClickTrackingUrl',
        'creative_view_url' => 'setCreativeViewUrl',
        'cta_type' => 'setCtaType',
        'custom_cta_button_text' => 'setCustomCtaButtonText',
        'description_text' => 'setDescriptionText',
        'destination_url' => 'setDestinationUrl',
        'forecasting_url' => 'setForecastingUrl',
        'impression_url' => 'setImpressionUrl',
        'video_id' => 'setVideoId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ad_tag' => 'getAdTag',
        'click_tracking_url' => 'getClickTrackingUrl',
        'creative_view_url' => 'getCreativeViewUrl',
        'cta_type' => 'getCtaType',
        'custom_cta_button_text' => 'getCustomCtaButtonText',
        'description_text' => 'getDescriptionText',
        'destination_url' => 'getDestinationUrl',
        'forecasting_url' => 'getForecastingUrl',
        'impression_url' => 'getImpressionUrl',
        'video_id' => 'getVideoId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CTA_TYPE_UNSPECIFIED = 'unspecified';
    const CTA_TYPE_VISIT_ADVERTISER_SITE = 'visitAdvertiserSite';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCtaTypeAllowableValues()
    {
        return [
            self::CTA_TYPE_UNSPECIFIED,
            self::CTA_TYPE_VISIT_ADVERTISER_SITE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ad_tag'] = isset($data['ad_tag']) ? $data['ad_tag'] : null;
        $this->container['click_tracking_url'] = isset($data['click_tracking_url']) ? $data['click_tracking_url'] : null;
        $this->container['creative_view_url'] = isset($data['creative_view_url']) ? $data['creative_view_url'] : null;
        $this->container['cta_type'] = isset($data['cta_type']) ? $data['cta_type'] : null;
        $this->container['custom_cta_button_text'] = isset($data['custom_cta_button_text']) ? $data['custom_cta_button_text'] : null;
        $this->container['description_text'] = isset($data['description_text']) ? $data['description_text'] : null;
        $this->container['destination_url'] = isset($data['destination_url']) ? $data['destination_url'] : null;
        $this->container['forecasting_url'] = isset($data['forecasting_url']) ? $data['forecasting_url'] : null;
        $this->container['impression_url'] = isset($data['impression_url']) ? $data['impression_url'] : null;
        $this->container['video_id'] = isset($data['video_id']) ? $data['video_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCtaTypeAllowableValues();
        if (!in_array($this->container['cta_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cta_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCtaTypeAllowableValues();
        if (!in_array($this->container['cta_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets ad_tag
     *
     * @return string
     */
    public function getAdTag()
    {
        return $this->container['ad_tag'];
    }

    /**
     * Sets ad_tag
     *
     * @param string $ad_tag The URL the client should fetch to request a promoted item.
     *
     * @return $this
     */
    public function setAdTag($ad_tag)
    {
        $this->container['ad_tag'] = $ad_tag;

        return $this;
    }

    /**
     * Gets click_tracking_url
     *
     * @return string
     */
    public function getClickTrackingUrl()
    {
        return $this->container['click_tracking_url'];
    }

    /**
     * Sets click_tracking_url
     *
     * @param string $click_tracking_url The URL the client should ping to indicate that the user clicked through on this promoted item.
     *
     * @return $this
     */
    public function setClickTrackingUrl($click_tracking_url)
    {
        $this->container['click_tracking_url'] = $click_tracking_url;

        return $this;
    }

    /**
     * Gets creative_view_url
     *
     * @return string
     */
    public function getCreativeViewUrl()
    {
        return $this->container['creative_view_url'];
    }

    /**
     * Sets creative_view_url
     *
     * @param string $creative_view_url The URL the client should ping to indicate that the user was shown this promoted item.
     *
     * @return $this
     */
    public function setCreativeViewUrl($creative_view_url)
    {
        $this->container['creative_view_url'] = $creative_view_url;

        return $this;
    }

    /**
     * Gets cta_type
     *
     * @return string
     */
    public function getCtaType()
    {
        return $this->container['cta_type'];
    }

    /**
     * Sets cta_type
     *
     * @param string $cta_type The type of call-to-action, a message to the user indicating action that can be taken.
     *
     * @return $this
     */
    public function setCtaType($cta_type)
    {
        $allowedValues = $this->getCtaTypeAllowableValues();
        if (!is_null($cta_type) && !in_array($cta_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cta_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cta_type'] = $cta_type;

        return $this;
    }

    /**
     * Gets custom_cta_button_text
     *
     * @return string
     */
    public function getCustomCtaButtonText()
    {
        return $this->container['custom_cta_button_text'];
    }

    /**
     * Sets custom_cta_button_text
     *
     * @param string $custom_cta_button_text The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
     *
     * @return $this
     */
    public function setCustomCtaButtonText($custom_cta_button_text)
    {
        $this->container['custom_cta_button_text'] = $custom_cta_button_text;

        return $this;
    }

    /**
     * Gets description_text
     *
     * @return string
     */
    public function getDescriptionText()
    {
        return $this->container['description_text'];
    }

    /**
     * Sets description_text
     *
     * @param string $description_text The text description to accompany the promoted item.
     *
     * @return $this
     */
    public function setDescriptionText($description_text)
    {
        $this->container['description_text'] = $description_text;

        return $this;
    }

    /**
     * Gets destination_url
     *
     * @return string
     */
    public function getDestinationUrl()
    {
        return $this->container['destination_url'];
    }

    /**
     * Sets destination_url
     *
     * @param string $destination_url The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
     *
     * @return $this
     */
    public function setDestinationUrl($destination_url)
    {
        $this->container['destination_url'] = $destination_url;

        return $this;
    }

    /**
     * Gets forecasting_url
     *
     * @return string[]
     */
    public function getForecastingUrl()
    {
        return $this->container['forecasting_url'];
    }

    /**
     * Sets forecasting_url
     *
     * @param string[] $forecasting_url The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
     *
     * @return $this
     */
    public function setForecastingUrl($forecasting_url)
    {
        $this->container['forecasting_url'] = $forecasting_url;

        return $this;
    }

    /**
     * Gets impression_url
     *
     * @return string[]
     */
    public function getImpressionUrl()
    {
        return $this->container['impression_url'];
    }

    /**
     * Sets impression_url
     *
     * @param string[] $impression_url The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
     *
     * @return $this
     */
    public function setImpressionUrl($impression_url)
    {
        $this->container['impression_url'] = $impression_url;

        return $this;
    }

    /**
     * Gets video_id
     *
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['video_id'];
    }

    /**
     * Sets video_id
     *
     * @param string $video_id The ID that YouTube uses to uniquely identify the promoted video.
     *
     * @return $this
     */
    public function setVideoId($video_id)
    {
        $this->container['video_id'] = $video_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


