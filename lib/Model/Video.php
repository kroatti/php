<?php
/**
 * Video
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Video Class Doc Comment
 *
 * @category Class
 * @description A video resource represents a YouTube video.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Video implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Video';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'age_gating' => '\Swagger\Client\Model\VideoAgeGating',
        'content_details' => '\Swagger\Client\Model\VideoContentDetails',
        'etag' => 'string',
        'file_details' => '\Swagger\Client\Model\VideoFileDetails',
        'id' => 'string',
        'kind' => 'string',
        'live_streaming_details' => '\Swagger\Client\Model\VideoLiveStreamingDetails',
        'localizations' => 'map[string,\Swagger\Client\Model\VideoLocalization]',
        'monetization_details' => '\Swagger\Client\Model\VideoMonetizationDetails',
        'player' => '\Swagger\Client\Model\VideoPlayer',
        'processing_details' => '\Swagger\Client\Model\VideoProcessingDetails',
        'project_details' => '\Swagger\Client\Model\VideoProjectDetails',
        'recording_details' => '\Swagger\Client\Model\VideoRecordingDetails',
        'snippet' => '\Swagger\Client\Model\VideoSnippet',
        'statistics' => '\Swagger\Client\Model\VideoStatistics',
        'status' => '\Swagger\Client\Model\VideoStatus',
        'suggestions' => '\Swagger\Client\Model\VideoSuggestions',
        'topic_details' => '\Swagger\Client\Model\VideoTopicDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'age_gating' => null,
        'content_details' => null,
        'etag' => null,
        'file_details' => null,
        'id' => null,
        'kind' => null,
        'live_streaming_details' => null,
        'localizations' => null,
        'monetization_details' => null,
        'player' => null,
        'processing_details' => null,
        'project_details' => null,
        'recording_details' => null,
        'snippet' => null,
        'statistics' => null,
        'status' => null,
        'suggestions' => null,
        'topic_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'age_gating' => 'ageGating',
        'content_details' => 'contentDetails',
        'etag' => 'etag',
        'file_details' => 'fileDetails',
        'id' => 'id',
        'kind' => 'kind',
        'live_streaming_details' => 'liveStreamingDetails',
        'localizations' => 'localizations',
        'monetization_details' => 'monetizationDetails',
        'player' => 'player',
        'processing_details' => 'processingDetails',
        'project_details' => 'projectDetails',
        'recording_details' => 'recordingDetails',
        'snippet' => 'snippet',
        'statistics' => 'statistics',
        'status' => 'status',
        'suggestions' => 'suggestions',
        'topic_details' => 'topicDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'age_gating' => 'setAgeGating',
        'content_details' => 'setContentDetails',
        'etag' => 'setEtag',
        'file_details' => 'setFileDetails',
        'id' => 'setId',
        'kind' => 'setKind',
        'live_streaming_details' => 'setLiveStreamingDetails',
        'localizations' => 'setLocalizations',
        'monetization_details' => 'setMonetizationDetails',
        'player' => 'setPlayer',
        'processing_details' => 'setProcessingDetails',
        'project_details' => 'setProjectDetails',
        'recording_details' => 'setRecordingDetails',
        'snippet' => 'setSnippet',
        'statistics' => 'setStatistics',
        'status' => 'setStatus',
        'suggestions' => 'setSuggestions',
        'topic_details' => 'setTopicDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'age_gating' => 'getAgeGating',
        'content_details' => 'getContentDetails',
        'etag' => 'getEtag',
        'file_details' => 'getFileDetails',
        'id' => 'getId',
        'kind' => 'getKind',
        'live_streaming_details' => 'getLiveStreamingDetails',
        'localizations' => 'getLocalizations',
        'monetization_details' => 'getMonetizationDetails',
        'player' => 'getPlayer',
        'processing_details' => 'getProcessingDetails',
        'project_details' => 'getProjectDetails',
        'recording_details' => 'getRecordingDetails',
        'snippet' => 'getSnippet',
        'statistics' => 'getStatistics',
        'status' => 'getStatus',
        'suggestions' => 'getSuggestions',
        'topic_details' => 'getTopicDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['age_gating'] = isset($data['age_gating']) ? $data['age_gating'] : null;
        $this->container['content_details'] = isset($data['content_details']) ? $data['content_details'] : null;
        $this->container['etag'] = isset($data['etag']) ? $data['etag'] : null;
        $this->container['file_details'] = isset($data['file_details']) ? $data['file_details'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : 'youtube#video';
        $this->container['live_streaming_details'] = isset($data['live_streaming_details']) ? $data['live_streaming_details'] : null;
        $this->container['localizations'] = isset($data['localizations']) ? $data['localizations'] : null;
        $this->container['monetization_details'] = isset($data['monetization_details']) ? $data['monetization_details'] : null;
        $this->container['player'] = isset($data['player']) ? $data['player'] : null;
        $this->container['processing_details'] = isset($data['processing_details']) ? $data['processing_details'] : null;
        $this->container['project_details'] = isset($data['project_details']) ? $data['project_details'] : null;
        $this->container['recording_details'] = isset($data['recording_details']) ? $data['recording_details'] : null;
        $this->container['snippet'] = isset($data['snippet']) ? $data['snippet'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suggestions'] = isset($data['suggestions']) ? $data['suggestions'] : null;
        $this->container['topic_details'] = isset($data['topic_details']) ? $data['topic_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets age_gating
     *
     * @return \Swagger\Client\Model\VideoAgeGating
     */
    public function getAgeGating()
    {
        return $this->container['age_gating'];
    }

    /**
     * Sets age_gating
     *
     * @param \Swagger\Client\Model\VideoAgeGating $age_gating Age restriction details related to a video. This data can only be retrieved by the video owner.
     *
     * @return $this
     */
    public function setAgeGating($age_gating)
    {
        $this->container['age_gating'] = $age_gating;

        return $this;
    }

    /**
     * Gets content_details
     *
     * @return \Swagger\Client\Model\VideoContentDetails
     */
    public function getContentDetails()
    {
        return $this->container['content_details'];
    }

    /**
     * Sets content_details
     *
     * @param \Swagger\Client\Model\VideoContentDetails $content_details The contentDetails object contains information about the video content, including the length of the video and its aspect ratio.
     *
     * @return $this
     */
    public function setContentDetails($content_details)
    {
        $this->container['content_details'] = $content_details;

        return $this;
    }

    /**
     * Gets etag
     *
     * @return string
     */
    public function getEtag()
    {
        return $this->container['etag'];
    }

    /**
     * Sets etag
     *
     * @param string $etag Etag of this resource.
     *
     * @return $this
     */
    public function setEtag($etag)
    {
        $this->container['etag'] = $etag;

        return $this;
    }

    /**
     * Gets file_details
     *
     * @return \Swagger\Client\Model\VideoFileDetails
     */
    public function getFileDetails()
    {
        return $this->container['file_details'];
    }

    /**
     * Sets file_details
     *
     * @param \Swagger\Client\Model\VideoFileDetails $file_details The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner.
     *
     * @return $this
     */
    public function setFileDetails($file_details)
    {
        $this->container['file_details'] = $file_details;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID that YouTube uses to uniquely identify the video.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Identifies what kind of resource this is. Value: the fixed string \"youtube#video\".
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets live_streaming_details
     *
     * @return \Swagger\Client\Model\VideoLiveStreamingDetails
     */
    public function getLiveStreamingDetails()
    {
        return $this->container['live_streaming_details'];
    }

    /**
     * Sets live_streaming_details
     *
     * @param \Swagger\Client\Model\VideoLiveStreamingDetails $live_streaming_details The liveStreamingDetails object contains metadata about a live video broadcast. The object will only be present in a video resource if the video is an upcoming, live, or completed live broadcast.
     *
     * @return $this
     */
    public function setLiveStreamingDetails($live_streaming_details)
    {
        $this->container['live_streaming_details'] = $live_streaming_details;

        return $this;
    }

    /**
     * Gets localizations
     *
     * @return map[string,\Swagger\Client\Model\VideoLocalization]
     */
    public function getLocalizations()
    {
        return $this->container['localizations'];
    }

    /**
     * Sets localizations
     *
     * @param map[string,\Swagger\Client\Model\VideoLocalization] $localizations List with all localizations.
     *
     * @return $this
     */
    public function setLocalizations($localizations)
    {
        $this->container['localizations'] = $localizations;

        return $this;
    }

    /**
     * Gets monetization_details
     *
     * @return \Swagger\Client\Model\VideoMonetizationDetails
     */
    public function getMonetizationDetails()
    {
        return $this->container['monetization_details'];
    }

    /**
     * Sets monetization_details
     *
     * @param \Swagger\Client\Model\VideoMonetizationDetails $monetization_details The monetizationDetails object encapsulates information about the monetization status of the video.
     *
     * @return $this
     */
    public function setMonetizationDetails($monetization_details)
    {
        $this->container['monetization_details'] = $monetization_details;

        return $this;
    }

    /**
     * Gets player
     *
     * @return \Swagger\Client\Model\VideoPlayer
     */
    public function getPlayer()
    {
        return $this->container['player'];
    }

    /**
     * Sets player
     *
     * @param \Swagger\Client\Model\VideoPlayer $player The player object contains information that you would use to play the video in an embedded player.
     *
     * @return $this
     */
    public function setPlayer($player)
    {
        $this->container['player'] = $player;

        return $this;
    }

    /**
     * Gets processing_details
     *
     * @return \Swagger\Client\Model\VideoProcessingDetails
     */
    public function getProcessingDetails()
    {
        return $this->container['processing_details'];
    }

    /**
     * Sets processing_details
     *
     * @param \Swagger\Client\Model\VideoProcessingDetails $processing_details The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video.  The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner.
     *
     * @return $this
     */
    public function setProcessingDetails($processing_details)
    {
        $this->container['processing_details'] = $processing_details;

        return $this;
    }

    /**
     * Gets project_details
     *
     * @return \Swagger\Client\Model\VideoProjectDetails
     */
    public function getProjectDetails()
    {
        return $this->container['project_details'];
    }

    /**
     * Sets project_details
     *
     * @param \Swagger\Client\Model\VideoProjectDetails $project_details The projectDetails object contains information about the project specific video metadata.
     *
     * @return $this
     */
    public function setProjectDetails($project_details)
    {
        $this->container['project_details'] = $project_details;

        return $this;
    }

    /**
     * Gets recording_details
     *
     * @return \Swagger\Client\Model\VideoRecordingDetails
     */
    public function getRecordingDetails()
    {
        return $this->container['recording_details'];
    }

    /**
     * Sets recording_details
     *
     * @param \Swagger\Client\Model\VideoRecordingDetails $recording_details The recordingDetails object encapsulates information about the location, date and address where the video was recorded.
     *
     * @return $this
     */
    public function setRecordingDetails($recording_details)
    {
        $this->container['recording_details'] = $recording_details;

        return $this;
    }

    /**
     * Gets snippet
     *
     * @return \Swagger\Client\Model\VideoSnippet
     */
    public function getSnippet()
    {
        return $this->container['snippet'];
    }

    /**
     * Sets snippet
     *
     * @param \Swagger\Client\Model\VideoSnippet $snippet The snippet object contains basic details about the video, such as its title, description, and category.
     *
     * @return $this
     */
    public function setSnippet($snippet)
    {
        $this->container['snippet'] = $snippet;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Swagger\Client\Model\VideoStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Swagger\Client\Model\VideoStatistics $statistics The statistics object contains statistics about the video.
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\VideoStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\VideoStatus $status The status object contains information about the video's uploading, processing, and privacy statuses.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suggestions
     *
     * @return \Swagger\Client\Model\VideoSuggestions
     */
    public function getSuggestions()
    {
        return $this->container['suggestions'];
    }

    /**
     * Sets suggestions
     *
     * @param \Swagger\Client\Model\VideoSuggestions $suggestions The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video. This data can only be retrieved by the video owner.
     *
     * @return $this
     */
    public function setSuggestions($suggestions)
    {
        $this->container['suggestions'] = $suggestions;

        return $this;
    }

    /**
     * Gets topic_details
     *
     * @return \Swagger\Client\Model\VideoTopicDetails
     */
    public function getTopicDetails()
    {
        return $this->container['topic_details'];
    }

    /**
     * Sets topic_details
     *
     * @param \Swagger\Client\Model\VideoTopicDetails $topic_details The topicDetails object encapsulates information about Freebase topics associated with the video.
     *
     * @return $this
     */
    public function setTopicDetails($topic_details)
    {
        $this->container['topic_details'] = $topic_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


