<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Channel Class Doc Comment
 *
 * @category Class
 * @description A channel resource contains information about a YouTube channel.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audit_details' => '\Swagger\Client\Model\ChannelAuditDetails',
        'branding_settings' => '\Swagger\Client\Model\ChannelBrandingSettings',
        'content_details' => '\Swagger\Client\Model\ChannelContentDetails',
        'content_owner_details' => '\Swagger\Client\Model\ChannelContentOwnerDetails',
        'conversion_pings' => '\Swagger\Client\Model\ChannelConversionPings',
        'etag' => 'string',
        'id' => 'string',
        'invideo_promotion' => '\Swagger\Client\Model\InvideoPromotion',
        'kind' => 'string',
        'localizations' => 'map[string,\Swagger\Client\Model\ChannelLocalization]',
        'snippet' => '\Swagger\Client\Model\ChannelSnippet',
        'statistics' => '\Swagger\Client\Model\ChannelStatistics',
        'status' => '\Swagger\Client\Model\ChannelStatus',
        'topic_details' => '\Swagger\Client\Model\ChannelTopicDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audit_details' => null,
        'branding_settings' => null,
        'content_details' => null,
        'content_owner_details' => null,
        'conversion_pings' => null,
        'etag' => null,
        'id' => null,
        'invideo_promotion' => null,
        'kind' => null,
        'localizations' => null,
        'snippet' => null,
        'statistics' => null,
        'status' => null,
        'topic_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audit_details' => 'auditDetails',
        'branding_settings' => 'brandingSettings',
        'content_details' => 'contentDetails',
        'content_owner_details' => 'contentOwnerDetails',
        'conversion_pings' => 'conversionPings',
        'etag' => 'etag',
        'id' => 'id',
        'invideo_promotion' => 'invideoPromotion',
        'kind' => 'kind',
        'localizations' => 'localizations',
        'snippet' => 'snippet',
        'statistics' => 'statistics',
        'status' => 'status',
        'topic_details' => 'topicDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audit_details' => 'setAuditDetails',
        'branding_settings' => 'setBrandingSettings',
        'content_details' => 'setContentDetails',
        'content_owner_details' => 'setContentOwnerDetails',
        'conversion_pings' => 'setConversionPings',
        'etag' => 'setEtag',
        'id' => 'setId',
        'invideo_promotion' => 'setInvideoPromotion',
        'kind' => 'setKind',
        'localizations' => 'setLocalizations',
        'snippet' => 'setSnippet',
        'statistics' => 'setStatistics',
        'status' => 'setStatus',
        'topic_details' => 'setTopicDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audit_details' => 'getAuditDetails',
        'branding_settings' => 'getBrandingSettings',
        'content_details' => 'getContentDetails',
        'content_owner_details' => 'getContentOwnerDetails',
        'conversion_pings' => 'getConversionPings',
        'etag' => 'getEtag',
        'id' => 'getId',
        'invideo_promotion' => 'getInvideoPromotion',
        'kind' => 'getKind',
        'localizations' => 'getLocalizations',
        'snippet' => 'getSnippet',
        'statistics' => 'getStatistics',
        'status' => 'getStatus',
        'topic_details' => 'getTopicDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audit_details'] = isset($data['audit_details']) ? $data['audit_details'] : null;
        $this->container['branding_settings'] = isset($data['branding_settings']) ? $data['branding_settings'] : null;
        $this->container['content_details'] = isset($data['content_details']) ? $data['content_details'] : null;
        $this->container['content_owner_details'] = isset($data['content_owner_details']) ? $data['content_owner_details'] : null;
        $this->container['conversion_pings'] = isset($data['conversion_pings']) ? $data['conversion_pings'] : null;
        $this->container['etag'] = isset($data['etag']) ? $data['etag'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invideo_promotion'] = isset($data['invideo_promotion']) ? $data['invideo_promotion'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : 'youtube#channel';
        $this->container['localizations'] = isset($data['localizations']) ? $data['localizations'] : null;
        $this->container['snippet'] = isset($data['snippet']) ? $data['snippet'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['topic_details'] = isset($data['topic_details']) ? $data['topic_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets audit_details
     *
     * @return \Swagger\Client\Model\ChannelAuditDetails
     */
    public function getAuditDetails()
    {
        return $this->container['audit_details'];
    }

    /**
     * Sets audit_details
     *
     * @param \Swagger\Client\Model\ChannelAuditDetails $audit_details The auditionDetails object encapsulates channel data that is relevant for YouTube Partners during the audition process.
     *
     * @return $this
     */
    public function setAuditDetails($audit_details)
    {
        $this->container['audit_details'] = $audit_details;

        return $this;
    }

    /**
     * Gets branding_settings
     *
     * @return \Swagger\Client\Model\ChannelBrandingSettings
     */
    public function getBrandingSettings()
    {
        return $this->container['branding_settings'];
    }

    /**
     * Sets branding_settings
     *
     * @param \Swagger\Client\Model\ChannelBrandingSettings $branding_settings The brandingSettings object encapsulates information about the branding of the channel.
     *
     * @return $this
     */
    public function setBrandingSettings($branding_settings)
    {
        $this->container['branding_settings'] = $branding_settings;

        return $this;
    }

    /**
     * Gets content_details
     *
     * @return \Swagger\Client\Model\ChannelContentDetails
     */
    public function getContentDetails()
    {
        return $this->container['content_details'];
    }

    /**
     * Sets content_details
     *
     * @param \Swagger\Client\Model\ChannelContentDetails $content_details The contentDetails object encapsulates information about the channel's content.
     *
     * @return $this
     */
    public function setContentDetails($content_details)
    {
        $this->container['content_details'] = $content_details;

        return $this;
    }

    /**
     * Gets content_owner_details
     *
     * @return \Swagger\Client\Model\ChannelContentOwnerDetails
     */
    public function getContentOwnerDetails()
    {
        return $this->container['content_owner_details'];
    }

    /**
     * Sets content_owner_details
     *
     * @param \Swagger\Client\Model\ChannelContentOwnerDetails $content_owner_details The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
     *
     * @return $this
     */
    public function setContentOwnerDetails($content_owner_details)
    {
        $this->container['content_owner_details'] = $content_owner_details;

        return $this;
    }

    /**
     * Gets conversion_pings
     *
     * @return \Swagger\Client\Model\ChannelConversionPings
     */
    public function getConversionPings()
    {
        return $this->container['conversion_pings'];
    }

    /**
     * Sets conversion_pings
     *
     * @param \Swagger\Client\Model\ChannelConversionPings $conversion_pings The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
     *
     * @return $this
     */
    public function setConversionPings($conversion_pings)
    {
        $this->container['conversion_pings'] = $conversion_pings;

        return $this;
    }

    /**
     * Gets etag
     *
     * @return string
     */
    public function getEtag()
    {
        return $this->container['etag'];
    }

    /**
     * Sets etag
     *
     * @param string $etag Etag of this resource.
     *
     * @return $this
     */
    public function setEtag($etag)
    {
        $this->container['etag'] = $etag;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID that YouTube uses to uniquely identify the channel.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invideo_promotion
     *
     * @return \Swagger\Client\Model\InvideoPromotion
     */
    public function getInvideoPromotion()
    {
        return $this->container['invideo_promotion'];
    }

    /**
     * Sets invideo_promotion
     *
     * @param \Swagger\Client\Model\InvideoPromotion $invideo_promotion The invideoPromotion object encapsulates information about promotion campaign associated with the channel.
     *
     * @return $this
     */
    public function setInvideoPromotion($invideo_promotion)
    {
        $this->container['invideo_promotion'] = $invideo_promotion;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets localizations
     *
     * @return map[string,\Swagger\Client\Model\ChannelLocalization]
     */
    public function getLocalizations()
    {
        return $this->container['localizations'];
    }

    /**
     * Sets localizations
     *
     * @param map[string,\Swagger\Client\Model\ChannelLocalization] $localizations Localizations for different languages
     *
     * @return $this
     */
    public function setLocalizations($localizations)
    {
        $this->container['localizations'] = $localizations;

        return $this;
    }

    /**
     * Gets snippet
     *
     * @return \Swagger\Client\Model\ChannelSnippet
     */
    public function getSnippet()
    {
        return $this->container['snippet'];
    }

    /**
     * Sets snippet
     *
     * @param \Swagger\Client\Model\ChannelSnippet $snippet The snippet object contains basic details about the channel, such as its title, description, and thumbnail images.
     *
     * @return $this
     */
    public function setSnippet($snippet)
    {
        $this->container['snippet'] = $snippet;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Swagger\Client\Model\ChannelStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Swagger\Client\Model\ChannelStatistics $statistics The statistics object encapsulates statistics for the channel.
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\ChannelStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\ChannelStatus $status The status object encapsulates information about the privacy status of the channel.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets topic_details
     *
     * @return \Swagger\Client\Model\ChannelTopicDetails
     */
    public function getTopicDetails()
    {
        return $this->container['topic_details'];
    }

    /**
     * Sets topic_details
     *
     * @param \Swagger\Client\Model\ChannelTopicDetails $topic_details The topicDetails object encapsulates information about Freebase topics associated with the channel.
     *
     * @return $this
     */
    public function setTopicDetails($topic_details)
    {
        $this->container['topic_details'] = $topic_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


