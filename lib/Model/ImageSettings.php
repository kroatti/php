<?php
/**
 * ImageSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImageSettings Class Doc Comment
 *
 * @category Class
 * @description Branding properties for images associated with the channel.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImageSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'background_image_url' => '\Swagger\Client\Model\LocalizedProperty',
        'banner_external_url' => 'string',
        'banner_image_url' => 'string',
        'banner_mobile_extra_hd_image_url' => 'string',
        'banner_mobile_hd_image_url' => 'string',
        'banner_mobile_image_url' => 'string',
        'banner_mobile_low_image_url' => 'string',
        'banner_mobile_medium_hd_image_url' => 'string',
        'banner_tablet_extra_hd_image_url' => 'string',
        'banner_tablet_hd_image_url' => 'string',
        'banner_tablet_image_url' => 'string',
        'banner_tablet_low_image_url' => 'string',
        'banner_tv_high_image_url' => 'string',
        'banner_tv_image_url' => 'string',
        'banner_tv_low_image_url' => 'string',
        'banner_tv_medium_image_url' => 'string',
        'large_branded_banner_image_imap_script' => '\Swagger\Client\Model\LocalizedProperty',
        'large_branded_banner_image_url' => '\Swagger\Client\Model\LocalizedProperty',
        'small_branded_banner_image_imap_script' => '\Swagger\Client\Model\LocalizedProperty',
        'small_branded_banner_image_url' => '\Swagger\Client\Model\LocalizedProperty',
        'tracking_image_url' => 'string',
        'watch_icon_image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'background_image_url' => null,
        'banner_external_url' => null,
        'banner_image_url' => null,
        'banner_mobile_extra_hd_image_url' => null,
        'banner_mobile_hd_image_url' => null,
        'banner_mobile_image_url' => null,
        'banner_mobile_low_image_url' => null,
        'banner_mobile_medium_hd_image_url' => null,
        'banner_tablet_extra_hd_image_url' => null,
        'banner_tablet_hd_image_url' => null,
        'banner_tablet_image_url' => null,
        'banner_tablet_low_image_url' => null,
        'banner_tv_high_image_url' => null,
        'banner_tv_image_url' => null,
        'banner_tv_low_image_url' => null,
        'banner_tv_medium_image_url' => null,
        'large_branded_banner_image_imap_script' => null,
        'large_branded_banner_image_url' => null,
        'small_branded_banner_image_imap_script' => null,
        'small_branded_banner_image_url' => null,
        'tracking_image_url' => null,
        'watch_icon_image_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background_image_url' => 'backgroundImageUrl',
        'banner_external_url' => 'bannerExternalUrl',
        'banner_image_url' => 'bannerImageUrl',
        'banner_mobile_extra_hd_image_url' => 'bannerMobileExtraHdImageUrl',
        'banner_mobile_hd_image_url' => 'bannerMobileHdImageUrl',
        'banner_mobile_image_url' => 'bannerMobileImageUrl',
        'banner_mobile_low_image_url' => 'bannerMobileLowImageUrl',
        'banner_mobile_medium_hd_image_url' => 'bannerMobileMediumHdImageUrl',
        'banner_tablet_extra_hd_image_url' => 'bannerTabletExtraHdImageUrl',
        'banner_tablet_hd_image_url' => 'bannerTabletHdImageUrl',
        'banner_tablet_image_url' => 'bannerTabletImageUrl',
        'banner_tablet_low_image_url' => 'bannerTabletLowImageUrl',
        'banner_tv_high_image_url' => 'bannerTvHighImageUrl',
        'banner_tv_image_url' => 'bannerTvImageUrl',
        'banner_tv_low_image_url' => 'bannerTvLowImageUrl',
        'banner_tv_medium_image_url' => 'bannerTvMediumImageUrl',
        'large_branded_banner_image_imap_script' => 'largeBrandedBannerImageImapScript',
        'large_branded_banner_image_url' => 'largeBrandedBannerImageUrl',
        'small_branded_banner_image_imap_script' => 'smallBrandedBannerImageImapScript',
        'small_branded_banner_image_url' => 'smallBrandedBannerImageUrl',
        'tracking_image_url' => 'trackingImageUrl',
        'watch_icon_image_url' => 'watchIconImageUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background_image_url' => 'setBackgroundImageUrl',
        'banner_external_url' => 'setBannerExternalUrl',
        'banner_image_url' => 'setBannerImageUrl',
        'banner_mobile_extra_hd_image_url' => 'setBannerMobileExtraHdImageUrl',
        'banner_mobile_hd_image_url' => 'setBannerMobileHdImageUrl',
        'banner_mobile_image_url' => 'setBannerMobileImageUrl',
        'banner_mobile_low_image_url' => 'setBannerMobileLowImageUrl',
        'banner_mobile_medium_hd_image_url' => 'setBannerMobileMediumHdImageUrl',
        'banner_tablet_extra_hd_image_url' => 'setBannerTabletExtraHdImageUrl',
        'banner_tablet_hd_image_url' => 'setBannerTabletHdImageUrl',
        'banner_tablet_image_url' => 'setBannerTabletImageUrl',
        'banner_tablet_low_image_url' => 'setBannerTabletLowImageUrl',
        'banner_tv_high_image_url' => 'setBannerTvHighImageUrl',
        'banner_tv_image_url' => 'setBannerTvImageUrl',
        'banner_tv_low_image_url' => 'setBannerTvLowImageUrl',
        'banner_tv_medium_image_url' => 'setBannerTvMediumImageUrl',
        'large_branded_banner_image_imap_script' => 'setLargeBrandedBannerImageImapScript',
        'large_branded_banner_image_url' => 'setLargeBrandedBannerImageUrl',
        'small_branded_banner_image_imap_script' => 'setSmallBrandedBannerImageImapScript',
        'small_branded_banner_image_url' => 'setSmallBrandedBannerImageUrl',
        'tracking_image_url' => 'setTrackingImageUrl',
        'watch_icon_image_url' => 'setWatchIconImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background_image_url' => 'getBackgroundImageUrl',
        'banner_external_url' => 'getBannerExternalUrl',
        'banner_image_url' => 'getBannerImageUrl',
        'banner_mobile_extra_hd_image_url' => 'getBannerMobileExtraHdImageUrl',
        'banner_mobile_hd_image_url' => 'getBannerMobileHdImageUrl',
        'banner_mobile_image_url' => 'getBannerMobileImageUrl',
        'banner_mobile_low_image_url' => 'getBannerMobileLowImageUrl',
        'banner_mobile_medium_hd_image_url' => 'getBannerMobileMediumHdImageUrl',
        'banner_tablet_extra_hd_image_url' => 'getBannerTabletExtraHdImageUrl',
        'banner_tablet_hd_image_url' => 'getBannerTabletHdImageUrl',
        'banner_tablet_image_url' => 'getBannerTabletImageUrl',
        'banner_tablet_low_image_url' => 'getBannerTabletLowImageUrl',
        'banner_tv_high_image_url' => 'getBannerTvHighImageUrl',
        'banner_tv_image_url' => 'getBannerTvImageUrl',
        'banner_tv_low_image_url' => 'getBannerTvLowImageUrl',
        'banner_tv_medium_image_url' => 'getBannerTvMediumImageUrl',
        'large_branded_banner_image_imap_script' => 'getLargeBrandedBannerImageImapScript',
        'large_branded_banner_image_url' => 'getLargeBrandedBannerImageUrl',
        'small_branded_banner_image_imap_script' => 'getSmallBrandedBannerImageImapScript',
        'small_branded_banner_image_url' => 'getSmallBrandedBannerImageUrl',
        'tracking_image_url' => 'getTrackingImageUrl',
        'watch_icon_image_url' => 'getWatchIconImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background_image_url'] = isset($data['background_image_url']) ? $data['background_image_url'] : null;
        $this->container['banner_external_url'] = isset($data['banner_external_url']) ? $data['banner_external_url'] : null;
        $this->container['banner_image_url'] = isset($data['banner_image_url']) ? $data['banner_image_url'] : null;
        $this->container['banner_mobile_extra_hd_image_url'] = isset($data['banner_mobile_extra_hd_image_url']) ? $data['banner_mobile_extra_hd_image_url'] : null;
        $this->container['banner_mobile_hd_image_url'] = isset($data['banner_mobile_hd_image_url']) ? $data['banner_mobile_hd_image_url'] : null;
        $this->container['banner_mobile_image_url'] = isset($data['banner_mobile_image_url']) ? $data['banner_mobile_image_url'] : null;
        $this->container['banner_mobile_low_image_url'] = isset($data['banner_mobile_low_image_url']) ? $data['banner_mobile_low_image_url'] : null;
        $this->container['banner_mobile_medium_hd_image_url'] = isset($data['banner_mobile_medium_hd_image_url']) ? $data['banner_mobile_medium_hd_image_url'] : null;
        $this->container['banner_tablet_extra_hd_image_url'] = isset($data['banner_tablet_extra_hd_image_url']) ? $data['banner_tablet_extra_hd_image_url'] : null;
        $this->container['banner_tablet_hd_image_url'] = isset($data['banner_tablet_hd_image_url']) ? $data['banner_tablet_hd_image_url'] : null;
        $this->container['banner_tablet_image_url'] = isset($data['banner_tablet_image_url']) ? $data['banner_tablet_image_url'] : null;
        $this->container['banner_tablet_low_image_url'] = isset($data['banner_tablet_low_image_url']) ? $data['banner_tablet_low_image_url'] : null;
        $this->container['banner_tv_high_image_url'] = isset($data['banner_tv_high_image_url']) ? $data['banner_tv_high_image_url'] : null;
        $this->container['banner_tv_image_url'] = isset($data['banner_tv_image_url']) ? $data['banner_tv_image_url'] : null;
        $this->container['banner_tv_low_image_url'] = isset($data['banner_tv_low_image_url']) ? $data['banner_tv_low_image_url'] : null;
        $this->container['banner_tv_medium_image_url'] = isset($data['banner_tv_medium_image_url']) ? $data['banner_tv_medium_image_url'] : null;
        $this->container['large_branded_banner_image_imap_script'] = isset($data['large_branded_banner_image_imap_script']) ? $data['large_branded_banner_image_imap_script'] : null;
        $this->container['large_branded_banner_image_url'] = isset($data['large_branded_banner_image_url']) ? $data['large_branded_banner_image_url'] : null;
        $this->container['small_branded_banner_image_imap_script'] = isset($data['small_branded_banner_image_imap_script']) ? $data['small_branded_banner_image_imap_script'] : null;
        $this->container['small_branded_banner_image_url'] = isset($data['small_branded_banner_image_url']) ? $data['small_branded_banner_image_url'] : null;
        $this->container['tracking_image_url'] = isset($data['tracking_image_url']) ? $data['tracking_image_url'] : null;
        $this->container['watch_icon_image_url'] = isset($data['watch_icon_image_url']) ? $data['watch_icon_image_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets background_image_url
     *
     * @return \Swagger\Client\Model\LocalizedProperty
     */
    public function getBackgroundImageUrl()
    {
        return $this->container['background_image_url'];
    }

    /**
     * Sets background_image_url
     *
     * @param \Swagger\Client\Model\LocalizedProperty $background_image_url The URL for the background image shown on the video watch page. The image should be 1200px by 615px, with a maximum file size of 128k.
     *
     * @return $this
     */
    public function setBackgroundImageUrl($background_image_url)
    {
        $this->container['background_image_url'] = $background_image_url;

        return $this;
    }

    /**
     * Gets banner_external_url
     *
     * @return string
     */
    public function getBannerExternalUrl()
    {
        return $this->container['banner_external_url'];
    }

    /**
     * Sets banner_external_url
     *
     * @param string $banner_external_url This is used only in update requests; if it's set, we use this URL to generate all of the above banner URLs.
     *
     * @return $this
     */
    public function setBannerExternalUrl($banner_external_url)
    {
        $this->container['banner_external_url'] = $banner_external_url;

        return $this;
    }

    /**
     * Gets banner_image_url
     *
     * @return string
     */
    public function getBannerImageUrl()
    {
        return $this->container['banner_image_url'];
    }

    /**
     * Sets banner_image_url
     *
     * @param string $banner_image_url Banner image. Desktop size (1060x175).
     *
     * @return $this
     */
    public function setBannerImageUrl($banner_image_url)
    {
        $this->container['banner_image_url'] = $banner_image_url;

        return $this;
    }

    /**
     * Gets banner_mobile_extra_hd_image_url
     *
     * @return string
     */
    public function getBannerMobileExtraHdImageUrl()
    {
        return $this->container['banner_mobile_extra_hd_image_url'];
    }

    /**
     * Sets banner_mobile_extra_hd_image_url
     *
     * @param string $banner_mobile_extra_hd_image_url Banner image. Mobile size high resolution (1440x395).
     *
     * @return $this
     */
    public function setBannerMobileExtraHdImageUrl($banner_mobile_extra_hd_image_url)
    {
        $this->container['banner_mobile_extra_hd_image_url'] = $banner_mobile_extra_hd_image_url;

        return $this;
    }

    /**
     * Gets banner_mobile_hd_image_url
     *
     * @return string
     */
    public function getBannerMobileHdImageUrl()
    {
        return $this->container['banner_mobile_hd_image_url'];
    }

    /**
     * Sets banner_mobile_hd_image_url
     *
     * @param string $banner_mobile_hd_image_url Banner image. Mobile size high resolution (1280x360).
     *
     * @return $this
     */
    public function setBannerMobileHdImageUrl($banner_mobile_hd_image_url)
    {
        $this->container['banner_mobile_hd_image_url'] = $banner_mobile_hd_image_url;

        return $this;
    }

    /**
     * Gets banner_mobile_image_url
     *
     * @return string
     */
    public function getBannerMobileImageUrl()
    {
        return $this->container['banner_mobile_image_url'];
    }

    /**
     * Sets banner_mobile_image_url
     *
     * @param string $banner_mobile_image_url Banner image. Mobile size (640x175).
     *
     * @return $this
     */
    public function setBannerMobileImageUrl($banner_mobile_image_url)
    {
        $this->container['banner_mobile_image_url'] = $banner_mobile_image_url;

        return $this;
    }

    /**
     * Gets banner_mobile_low_image_url
     *
     * @return string
     */
    public function getBannerMobileLowImageUrl()
    {
        return $this->container['banner_mobile_low_image_url'];
    }

    /**
     * Sets banner_mobile_low_image_url
     *
     * @param string $banner_mobile_low_image_url Banner image. Mobile size low resolution (320x88).
     *
     * @return $this
     */
    public function setBannerMobileLowImageUrl($banner_mobile_low_image_url)
    {
        $this->container['banner_mobile_low_image_url'] = $banner_mobile_low_image_url;

        return $this;
    }

    /**
     * Gets banner_mobile_medium_hd_image_url
     *
     * @return string
     */
    public function getBannerMobileMediumHdImageUrl()
    {
        return $this->container['banner_mobile_medium_hd_image_url'];
    }

    /**
     * Sets banner_mobile_medium_hd_image_url
     *
     * @param string $banner_mobile_medium_hd_image_url Banner image. Mobile size medium/high resolution (960x263).
     *
     * @return $this
     */
    public function setBannerMobileMediumHdImageUrl($banner_mobile_medium_hd_image_url)
    {
        $this->container['banner_mobile_medium_hd_image_url'] = $banner_mobile_medium_hd_image_url;

        return $this;
    }

    /**
     * Gets banner_tablet_extra_hd_image_url
     *
     * @return string
     */
    public function getBannerTabletExtraHdImageUrl()
    {
        return $this->container['banner_tablet_extra_hd_image_url'];
    }

    /**
     * Sets banner_tablet_extra_hd_image_url
     *
     * @param string $banner_tablet_extra_hd_image_url Banner image. Tablet size extra high resolution (2560x424).
     *
     * @return $this
     */
    public function setBannerTabletExtraHdImageUrl($banner_tablet_extra_hd_image_url)
    {
        $this->container['banner_tablet_extra_hd_image_url'] = $banner_tablet_extra_hd_image_url;

        return $this;
    }

    /**
     * Gets banner_tablet_hd_image_url
     *
     * @return string
     */
    public function getBannerTabletHdImageUrl()
    {
        return $this->container['banner_tablet_hd_image_url'];
    }

    /**
     * Sets banner_tablet_hd_image_url
     *
     * @param string $banner_tablet_hd_image_url Banner image. Tablet size high resolution (2276x377).
     *
     * @return $this
     */
    public function setBannerTabletHdImageUrl($banner_tablet_hd_image_url)
    {
        $this->container['banner_tablet_hd_image_url'] = $banner_tablet_hd_image_url;

        return $this;
    }

    /**
     * Gets banner_tablet_image_url
     *
     * @return string
     */
    public function getBannerTabletImageUrl()
    {
        return $this->container['banner_tablet_image_url'];
    }

    /**
     * Sets banner_tablet_image_url
     *
     * @param string $banner_tablet_image_url Banner image. Tablet size (1707x283).
     *
     * @return $this
     */
    public function setBannerTabletImageUrl($banner_tablet_image_url)
    {
        $this->container['banner_tablet_image_url'] = $banner_tablet_image_url;

        return $this;
    }

    /**
     * Gets banner_tablet_low_image_url
     *
     * @return string
     */
    public function getBannerTabletLowImageUrl()
    {
        return $this->container['banner_tablet_low_image_url'];
    }

    /**
     * Sets banner_tablet_low_image_url
     *
     * @param string $banner_tablet_low_image_url Banner image. Tablet size low resolution (1138x188).
     *
     * @return $this
     */
    public function setBannerTabletLowImageUrl($banner_tablet_low_image_url)
    {
        $this->container['banner_tablet_low_image_url'] = $banner_tablet_low_image_url;

        return $this;
    }

    /**
     * Gets banner_tv_high_image_url
     *
     * @return string
     */
    public function getBannerTvHighImageUrl()
    {
        return $this->container['banner_tv_high_image_url'];
    }

    /**
     * Sets banner_tv_high_image_url
     *
     * @param string $banner_tv_high_image_url Banner image. TV size high resolution (1920x1080).
     *
     * @return $this
     */
    public function setBannerTvHighImageUrl($banner_tv_high_image_url)
    {
        $this->container['banner_tv_high_image_url'] = $banner_tv_high_image_url;

        return $this;
    }

    /**
     * Gets banner_tv_image_url
     *
     * @return string
     */
    public function getBannerTvImageUrl()
    {
        return $this->container['banner_tv_image_url'];
    }

    /**
     * Sets banner_tv_image_url
     *
     * @param string $banner_tv_image_url Banner image. TV size extra high resolution (2120x1192).
     *
     * @return $this
     */
    public function setBannerTvImageUrl($banner_tv_image_url)
    {
        $this->container['banner_tv_image_url'] = $banner_tv_image_url;

        return $this;
    }

    /**
     * Gets banner_tv_low_image_url
     *
     * @return string
     */
    public function getBannerTvLowImageUrl()
    {
        return $this->container['banner_tv_low_image_url'];
    }

    /**
     * Sets banner_tv_low_image_url
     *
     * @param string $banner_tv_low_image_url Banner image. TV size low resolution (854x480).
     *
     * @return $this
     */
    public function setBannerTvLowImageUrl($banner_tv_low_image_url)
    {
        $this->container['banner_tv_low_image_url'] = $banner_tv_low_image_url;

        return $this;
    }

    /**
     * Gets banner_tv_medium_image_url
     *
     * @return string
     */
    public function getBannerTvMediumImageUrl()
    {
        return $this->container['banner_tv_medium_image_url'];
    }

    /**
     * Sets banner_tv_medium_image_url
     *
     * @param string $banner_tv_medium_image_url Banner image. TV size medium resolution (1280x720).
     *
     * @return $this
     */
    public function setBannerTvMediumImageUrl($banner_tv_medium_image_url)
    {
        $this->container['banner_tv_medium_image_url'] = $banner_tv_medium_image_url;

        return $this;
    }

    /**
     * Gets large_branded_banner_image_imap_script
     *
     * @return \Swagger\Client\Model\LocalizedProperty
     */
    public function getLargeBrandedBannerImageImapScript()
    {
        return $this->container['large_branded_banner_image_imap_script'];
    }

    /**
     * Sets large_branded_banner_image_imap_script
     *
     * @param \Swagger\Client\Model\LocalizedProperty $large_branded_banner_image_imap_script The image map script for the large banner image.
     *
     * @return $this
     */
    public function setLargeBrandedBannerImageImapScript($large_branded_banner_image_imap_script)
    {
        $this->container['large_branded_banner_image_imap_script'] = $large_branded_banner_image_imap_script;

        return $this;
    }

    /**
     * Gets large_branded_banner_image_url
     *
     * @return \Swagger\Client\Model\LocalizedProperty
     */
    public function getLargeBrandedBannerImageUrl()
    {
        return $this->container['large_branded_banner_image_url'];
    }

    /**
     * Sets large_branded_banner_image_url
     *
     * @param \Swagger\Client\Model\LocalizedProperty $large_branded_banner_image_url The URL for the 854px by 70px image that appears below the video player in the expanded video view of the video watch page.
     *
     * @return $this
     */
    public function setLargeBrandedBannerImageUrl($large_branded_banner_image_url)
    {
        $this->container['large_branded_banner_image_url'] = $large_branded_banner_image_url;

        return $this;
    }

    /**
     * Gets small_branded_banner_image_imap_script
     *
     * @return \Swagger\Client\Model\LocalizedProperty
     */
    public function getSmallBrandedBannerImageImapScript()
    {
        return $this->container['small_branded_banner_image_imap_script'];
    }

    /**
     * Sets small_branded_banner_image_imap_script
     *
     * @param \Swagger\Client\Model\LocalizedProperty $small_branded_banner_image_imap_script The image map script for the small banner image.
     *
     * @return $this
     */
    public function setSmallBrandedBannerImageImapScript($small_branded_banner_image_imap_script)
    {
        $this->container['small_branded_banner_image_imap_script'] = $small_branded_banner_image_imap_script;

        return $this;
    }

    /**
     * Gets small_branded_banner_image_url
     *
     * @return \Swagger\Client\Model\LocalizedProperty
     */
    public function getSmallBrandedBannerImageUrl()
    {
        return $this->container['small_branded_banner_image_url'];
    }

    /**
     * Sets small_branded_banner_image_url
     *
     * @param \Swagger\Client\Model\LocalizedProperty $small_branded_banner_image_url The URL for the 640px by 70px banner image that appears below the video player in the default view of the video watch page.
     *
     * @return $this
     */
    public function setSmallBrandedBannerImageUrl($small_branded_banner_image_url)
    {
        $this->container['small_branded_banner_image_url'] = $small_branded_banner_image_url;

        return $this;
    }

    /**
     * Gets tracking_image_url
     *
     * @return string
     */
    public function getTrackingImageUrl()
    {
        return $this->container['tracking_image_url'];
    }

    /**
     * Sets tracking_image_url
     *
     * @param string $tracking_image_url The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
     *
     * @return $this
     */
    public function setTrackingImageUrl($tracking_image_url)
    {
        $this->container['tracking_image_url'] = $tracking_image_url;

        return $this;
    }

    /**
     * Gets watch_icon_image_url
     *
     * @return string
     */
    public function getWatchIconImageUrl()
    {
        return $this->container['watch_icon_image_url'];
    }

    /**
     * Sets watch_icon_image_url
     *
     * @param string $watch_icon_image_url The URL for the image that appears above the top-left corner of the video player. This is a 25-pixel-high image with a flexible width that cannot exceed 170 pixels.
     *
     * @return $this
     */
    public function setWatchIconImageUrl($watch_icon_image_url)
    {
        $this->container['watch_icon_image_url'] = $watch_icon_image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


