<?php
/**
 * LiveBroadcastSnippet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveBroadcastSnippet Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveBroadcastSnippet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiveBroadcastSnippet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actual_end_time' => '\DateTime',
        'actual_start_time' => '\DateTime',
        'channel_id' => 'string',
        'description' => 'string',
        'is_default_broadcast' => 'bool',
        'live_chat_id' => 'string',
        'published_at' => '\DateTime',
        'scheduled_end_time' => '\DateTime',
        'scheduled_start_time' => '\DateTime',
        'thumbnails' => '\Swagger\Client\Model\ThumbnailDetails',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actual_end_time' => 'date-time',
        'actual_start_time' => 'date-time',
        'channel_id' => null,
        'description' => null,
        'is_default_broadcast' => null,
        'live_chat_id' => null,
        'published_at' => 'date-time',
        'scheduled_end_time' => 'date-time',
        'scheduled_start_time' => 'date-time',
        'thumbnails' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_end_time' => 'actualEndTime',
        'actual_start_time' => 'actualStartTime',
        'channel_id' => 'channelId',
        'description' => 'description',
        'is_default_broadcast' => 'isDefaultBroadcast',
        'live_chat_id' => 'liveChatId',
        'published_at' => 'publishedAt',
        'scheduled_end_time' => 'scheduledEndTime',
        'scheduled_start_time' => 'scheduledStartTime',
        'thumbnails' => 'thumbnails',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_end_time' => 'setActualEndTime',
        'actual_start_time' => 'setActualStartTime',
        'channel_id' => 'setChannelId',
        'description' => 'setDescription',
        'is_default_broadcast' => 'setIsDefaultBroadcast',
        'live_chat_id' => 'setLiveChatId',
        'published_at' => 'setPublishedAt',
        'scheduled_end_time' => 'setScheduledEndTime',
        'scheduled_start_time' => 'setScheduledStartTime',
        'thumbnails' => 'setThumbnails',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_end_time' => 'getActualEndTime',
        'actual_start_time' => 'getActualStartTime',
        'channel_id' => 'getChannelId',
        'description' => 'getDescription',
        'is_default_broadcast' => 'getIsDefaultBroadcast',
        'live_chat_id' => 'getLiveChatId',
        'published_at' => 'getPublishedAt',
        'scheduled_end_time' => 'getScheduledEndTime',
        'scheduled_start_time' => 'getScheduledStartTime',
        'thumbnails' => 'getThumbnails',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_end_time'] = isset($data['actual_end_time']) ? $data['actual_end_time'] : null;
        $this->container['actual_start_time'] = isset($data['actual_start_time']) ? $data['actual_start_time'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_default_broadcast'] = isset($data['is_default_broadcast']) ? $data['is_default_broadcast'] : null;
        $this->container['live_chat_id'] = isset($data['live_chat_id']) ? $data['live_chat_id'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['scheduled_end_time'] = isset($data['scheduled_end_time']) ? $data['scheduled_end_time'] : null;
        $this->container['scheduled_start_time'] = isset($data['scheduled_start_time']) ? $data['scheduled_start_time'] : null;
        $this->container['thumbnails'] = isset($data['thumbnails']) ? $data['thumbnails'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets actual_end_time
     *
     * @return \DateTime
     */
    public function getActualEndTime()
    {
        return $this->container['actual_end_time'];
    }

    /**
     * Sets actual_end_time
     *
     * @param \DateTime $actual_end_time The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setActualEndTime($actual_end_time)
    {
        $this->container['actual_end_time'] = $actual_end_time;

        return $this;
    }

    /**
     * Gets actual_start_time
     *
     * @return \DateTime
     */
    public function getActualStartTime()
    {
        return $this->container['actual_start_time'];
    }

    /**
     * Sets actual_start_time
     *
     * @param \DateTime $actual_start_time The date and time that the broadcast actually started. This information is only available once the broadcast's state is live. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setActualStartTime($actual_start_time)
    {
        $this->container['actual_start_time'] = $actual_start_time;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_default_broadcast
     *
     * @return bool
     */
    public function getIsDefaultBroadcast()
    {
        return $this->container['is_default_broadcast'];
    }

    /**
     * Sets is_default_broadcast
     *
     * @param bool $is_default_broadcast is_default_broadcast
     *
     * @return $this
     */
    public function setIsDefaultBroadcast($is_default_broadcast)
    {
        $this->container['is_default_broadcast'] = $is_default_broadcast;

        return $this;
    }

    /**
     * Gets live_chat_id
     *
     * @return string
     */
    public function getLiveChatId()
    {
        return $this->container['live_chat_id'];
    }

    /**
     * Sets live_chat_id
     *
     * @param string $live_chat_id The id of the live chat for this broadcast.
     *
     * @return $this
     */
    public function setLiveChatId($live_chat_id)
    {
        $this->container['live_chat_id'] = $live_chat_id;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime $published_at The date and time that the broadcast was added to YouTube's live broadcast schedule. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets scheduled_end_time
     *
     * @return \DateTime
     */
    public function getScheduledEndTime()
    {
        return $this->container['scheduled_end_time'];
    }

    /**
     * Sets scheduled_end_time
     *
     * @param \DateTime $scheduled_end_time The date and time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setScheduledEndTime($scheduled_end_time)
    {
        $this->container['scheduled_end_time'] = $scheduled_end_time;

        return $this;
    }

    /**
     * Gets scheduled_start_time
     *
     * @return \DateTime
     */
    public function getScheduledStartTime()
    {
        return $this->container['scheduled_start_time'];
    }

    /**
     * Sets scheduled_start_time
     *
     * @param \DateTime $scheduled_start_time The date and time that the broadcast is scheduled to start. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setScheduledStartTime($scheduled_start_time)
    {
        $this->container['scheduled_start_time'] = $scheduled_start_time;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return \Swagger\Client\Model\ThumbnailDetails
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param \Swagger\Client\Model\ThumbnailDetails $thumbnails A map of thumbnail images associated with the broadcast. For each nested object in this object, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
     *
     * @return $this
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


