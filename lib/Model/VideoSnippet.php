<?php
/**
 * VideoSnippet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VideoSnippet Class Doc Comment
 *
 * @category Class
 * @description Basic details about a video, including title, description, uploader, thumbnails and category.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoSnippet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VideoSnippet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category_id' => 'string',
        'channel_id' => 'string',
        'channel_title' => 'string',
        'default_audio_language' => 'string',
        'default_language' => 'string',
        'description' => 'string',
        'live_broadcast_content' => 'string',
        'localized' => '\Swagger\Client\Model\VideoLocalization',
        'published_at' => '\DateTime',
        'tags' => 'string[]',
        'thumbnails' => '\Swagger\Client\Model\ThumbnailDetails',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category_id' => null,
        'channel_id' => null,
        'channel_title' => null,
        'default_audio_language' => null,
        'default_language' => null,
        'description' => null,
        'live_broadcast_content' => null,
        'localized' => null,
        'published_at' => 'date-time',
        'tags' => null,
        'thumbnails' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_id' => 'categoryId',
        'channel_id' => 'channelId',
        'channel_title' => 'channelTitle',
        'default_audio_language' => 'defaultAudioLanguage',
        'default_language' => 'defaultLanguage',
        'description' => 'description',
        'live_broadcast_content' => 'liveBroadcastContent',
        'localized' => 'localized',
        'published_at' => 'publishedAt',
        'tags' => 'tags',
        'thumbnails' => 'thumbnails',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_id' => 'setCategoryId',
        'channel_id' => 'setChannelId',
        'channel_title' => 'setChannelTitle',
        'default_audio_language' => 'setDefaultAudioLanguage',
        'default_language' => 'setDefaultLanguage',
        'description' => 'setDescription',
        'live_broadcast_content' => 'setLiveBroadcastContent',
        'localized' => 'setLocalized',
        'published_at' => 'setPublishedAt',
        'tags' => 'setTags',
        'thumbnails' => 'setThumbnails',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_id' => 'getCategoryId',
        'channel_id' => 'getChannelId',
        'channel_title' => 'getChannelTitle',
        'default_audio_language' => 'getDefaultAudioLanguage',
        'default_language' => 'getDefaultLanguage',
        'description' => 'getDescription',
        'live_broadcast_content' => 'getLiveBroadcastContent',
        'localized' => 'getLocalized',
        'published_at' => 'getPublishedAt',
        'tags' => 'getTags',
        'thumbnails' => 'getThumbnails',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LIVE_BROADCAST_CONTENT_LIVE = 'live';
    const LIVE_BROADCAST_CONTENT_NONE = 'none';
    const LIVE_BROADCAST_CONTENT_UPCOMING = 'upcoming';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLiveBroadcastContentAllowableValues()
    {
        return [
            self::LIVE_BROADCAST_CONTENT_LIVE,
            self::LIVE_BROADCAST_CONTENT_NONE,
            self::LIVE_BROADCAST_CONTENT_UPCOMING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel_title'] = isset($data['channel_title']) ? $data['channel_title'] : null;
        $this->container['default_audio_language'] = isset($data['default_audio_language']) ? $data['default_audio_language'] : null;
        $this->container['default_language'] = isset($data['default_language']) ? $data['default_language'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['live_broadcast_content'] = isset($data['live_broadcast_content']) ? $data['live_broadcast_content'] : null;
        $this->container['localized'] = isset($data['localized']) ? $data['localized'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['thumbnails'] = isset($data['thumbnails']) ? $data['thumbnails'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLiveBroadcastContentAllowableValues();
        if (!in_array($this->container['live_broadcast_content'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'live_broadcast_content', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getLiveBroadcastContentAllowableValues();
        if (!in_array($this->container['live_broadcast_content'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id The YouTube video category associated with the video.
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_title
     *
     * @return string
     */
    public function getChannelTitle()
    {
        return $this->container['channel_title'];
    }

    /**
     * Sets channel_title
     *
     * @param string $channel_title Channel title for the channel that the video belongs to.
     *
     * @return $this
     */
    public function setChannelTitle($channel_title)
    {
        $this->container['channel_title'] = $channel_title;

        return $this;
    }

    /**
     * Gets default_audio_language
     *
     * @return string
     */
    public function getDefaultAudioLanguage()
    {
        return $this->container['default_audio_language'];
    }

    /**
     * Sets default_audio_language
     *
     * @param string $default_audio_language The default_audio_language property specifies the language spoken in the video's default audio track.
     *
     * @return $this
     */
    public function setDefaultAudioLanguage($default_audio_language)
    {
        $this->container['default_audio_language'] = $default_audio_language;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string $default_language The language of the videos's default snippet.
     *
     * @return $this
     */
    public function setDefaultLanguage($default_language)
    {
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The video's description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets live_broadcast_content
     *
     * @return string
     */
    public function getLiveBroadcastContent()
    {
        return $this->container['live_broadcast_content'];
    }

    /**
     * Sets live_broadcast_content
     *
     * @param string $live_broadcast_content Indicates if the video is an upcoming/active live broadcast. Or it's \"none\" if the video is not an upcoming/active live broadcast.
     *
     * @return $this
     */
    public function setLiveBroadcastContent($live_broadcast_content)
    {
        $allowedValues = $this->getLiveBroadcastContentAllowableValues();
        if (!is_null($live_broadcast_content) && !in_array($live_broadcast_content, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'live_broadcast_content', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['live_broadcast_content'] = $live_broadcast_content;

        return $this;
    }

    /**
     * Gets localized
     *
     * @return \Swagger\Client\Model\VideoLocalization
     */
    public function getLocalized()
    {
        return $this->container['localized'];
    }

    /**
     * Sets localized
     *
     * @param \Swagger\Client\Model\VideoLocalization $localized Localized snippet selected with the hl parameter. If no such localization exists, this field is populated with the default snippet. (Read-only)
     *
     * @return $this
     */
    public function setLocalized($localized)
    {
        $this->container['localized'] = $localized;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime $published_at The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A list of keyword tags associated with the video. Tags may contain spaces.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return \Swagger\Client\Model\ThumbnailDetails
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param \Swagger\Client\Model\ThumbnailDetails $thumbnails A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
     *
     * @return $this
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The video's title.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


