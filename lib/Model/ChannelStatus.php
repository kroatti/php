<?php
/**
 * ChannelStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelStatus Class Doc Comment
 *
 * @category Class
 * @description JSON template for the status part of a channel.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_linked' => 'bool',
        'long_uploads_status' => 'string',
        'privacy_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_linked' => null,
        'long_uploads_status' => null,
        'privacy_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_linked' => 'isLinked',
        'long_uploads_status' => 'longUploadsStatus',
        'privacy_status' => 'privacyStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_linked' => 'setIsLinked',
        'long_uploads_status' => 'setLongUploadsStatus',
        'privacy_status' => 'setPrivacyStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_linked' => 'getIsLinked',
        'long_uploads_status' => 'getLongUploadsStatus',
        'privacy_status' => 'getPrivacyStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LONG_UPLOADS_STATUS_ALLOWED = 'allowed';
    const LONG_UPLOADS_STATUS_DISALLOWED = 'disallowed';
    const LONG_UPLOADS_STATUS_ELIGIBLE = 'eligible';
    const LONG_UPLOADS_STATUS_LONG_UPLOADS_UNSPECIFIED = 'longUploadsUnspecified';
    const PRIVACY_STATUS__PRIVATE = 'private';
    const PRIVACY_STATUS__PUBLIC = 'public';
    const PRIVACY_STATUS_UNLISTED = 'unlisted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLongUploadsStatusAllowableValues()
    {
        return [
            self::LONG_UPLOADS_STATUS_ALLOWED,
            self::LONG_UPLOADS_STATUS_DISALLOWED,
            self::LONG_UPLOADS_STATUS_ELIGIBLE,
            self::LONG_UPLOADS_STATUS_LONG_UPLOADS_UNSPECIFIED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivacyStatusAllowableValues()
    {
        return [
            self::PRIVACY_STATUS__PRIVATE,
            self::PRIVACY_STATUS__PUBLIC,
            self::PRIVACY_STATUS_UNLISTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_linked'] = isset($data['is_linked']) ? $data['is_linked'] : null;
        $this->container['long_uploads_status'] = isset($data['long_uploads_status']) ? $data['long_uploads_status'] : null;
        $this->container['privacy_status'] = isset($data['privacy_status']) ? $data['privacy_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLongUploadsStatusAllowableValues();
        if (!in_array($this->container['long_uploads_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'long_uploads_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!in_array($this->container['privacy_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'privacy_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getLongUploadsStatusAllowableValues();
        if (!in_array($this->container['long_uploads_status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!in_array($this->container['privacy_status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_linked
     *
     * @return bool
     */
    public function getIsLinked()
    {
        return $this->container['is_linked'];
    }

    /**
     * Sets is_linked
     *
     * @param bool $is_linked If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
     *
     * @return $this
     */
    public function setIsLinked($is_linked)
    {
        $this->container['is_linked'] = $is_linked;

        return $this;
    }

    /**
     * Gets long_uploads_status
     *
     * @return string
     */
    public function getLongUploadsStatus()
    {
        return $this->container['long_uploads_status'];
    }

    /**
     * Sets long_uploads_status
     *
     * @param string $long_uploads_status The long uploads status of this channel. See
     *
     * @return $this
     */
    public function setLongUploadsStatus($long_uploads_status)
    {
        $allowedValues = $this->getLongUploadsStatusAllowableValues();
        if (!is_null($long_uploads_status) && !in_array($long_uploads_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'long_uploads_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['long_uploads_status'] = $long_uploads_status;

        return $this;
    }

    /**
     * Gets privacy_status
     *
     * @return string
     */
    public function getPrivacyStatus()
    {
        return $this->container['privacy_status'];
    }

    /**
     * Sets privacy_status
     *
     * @param string $privacy_status Privacy status of the channel.
     *
     * @return $this
     */
    public function setPrivacyStatus($privacy_status)
    {
        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!is_null($privacy_status) && !in_array($privacy_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'privacy_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['privacy_status'] = $privacy_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


