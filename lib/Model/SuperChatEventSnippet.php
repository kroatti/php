<?php
/**
 * SuperChatEventSnippet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SuperChatEventSnippet Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuperChatEventSnippet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SuperChatEventSnippet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_micros' => 'string',
        'channel_id' => 'string',
        'comment_text' => 'string',
        'created_at' => '\DateTime',
        'currency' => 'string',
        'display_string' => 'string',
        'is_super_chat_for_good' => 'bool',
        'message_type' => 'int',
        'nonprofit' => '\Swagger\Client\Model\Nonprofit',
        'supporter_details' => '\Swagger\Client\Model\ChannelProfileDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_micros' => 'uint64',
        'channel_id' => null,
        'comment_text' => null,
        'created_at' => 'date-time',
        'currency' => null,
        'display_string' => null,
        'is_super_chat_for_good' => null,
        'message_type' => 'uint32',
        'nonprofit' => null,
        'supporter_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_micros' => 'amountMicros',
        'channel_id' => 'channelId',
        'comment_text' => 'commentText',
        'created_at' => 'createdAt',
        'currency' => 'currency',
        'display_string' => 'displayString',
        'is_super_chat_for_good' => 'isSuperChatForGood',
        'message_type' => 'messageType',
        'nonprofit' => 'nonprofit',
        'supporter_details' => 'supporterDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_micros' => 'setAmountMicros',
        'channel_id' => 'setChannelId',
        'comment_text' => 'setCommentText',
        'created_at' => 'setCreatedAt',
        'currency' => 'setCurrency',
        'display_string' => 'setDisplayString',
        'is_super_chat_for_good' => 'setIsSuperChatForGood',
        'message_type' => 'setMessageType',
        'nonprofit' => 'setNonprofit',
        'supporter_details' => 'setSupporterDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_micros' => 'getAmountMicros',
        'channel_id' => 'getChannelId',
        'comment_text' => 'getCommentText',
        'created_at' => 'getCreatedAt',
        'currency' => 'getCurrency',
        'display_string' => 'getDisplayString',
        'is_super_chat_for_good' => 'getIsSuperChatForGood',
        'message_type' => 'getMessageType',
        'nonprofit' => 'getNonprofit',
        'supporter_details' => 'getSupporterDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_micros'] = isset($data['amount_micros']) ? $data['amount_micros'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['comment_text'] = isset($data['comment_text']) ? $data['comment_text'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['display_string'] = isset($data['display_string']) ? $data['display_string'] : null;
        $this->container['is_super_chat_for_good'] = isset($data['is_super_chat_for_good']) ? $data['is_super_chat_for_good'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['nonprofit'] = isset($data['nonprofit']) ? $data['nonprofit'] : null;
        $this->container['supporter_details'] = isset($data['supporter_details']) ? $data['supporter_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets amount_micros
     *
     * @return string
     */
    public function getAmountMicros()
    {
        return $this->container['amount_micros'];
    }

    /**
     * Sets amount_micros
     *
     * @param string $amount_micros The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
     *
     * @return $this
     */
    public function setAmountMicros($amount_micros)
    {
        $this->container['amount_micros'] = $amount_micros;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id Channel id where the event occurred.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets comment_text
     *
     * @return string
     */
    public function getCommentText()
    {
        return $this->container['comment_text'];
    }

    /**
     * Sets comment_text
     *
     * @param string $comment_text The text contents of the comment left by the user.
     *
     * @return $this
     */
    public function setCommentText($comment_text)
    {
        $this->container['comment_text'] = $comment_text;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date and time when the event occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency in which the purchase was made. ISO 4217.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets display_string
     *
     * @return string
     */
    public function getDisplayString()
    {
        return $this->container['display_string'];
    }

    /**
     * Sets display_string
     *
     * @param string $display_string A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.
     *
     * @return $this
     */
    public function setDisplayString($display_string)
    {
        $this->container['display_string'] = $display_string;

        return $this;
    }

    /**
     * Gets is_super_chat_for_good
     *
     * @return bool
     */
    public function getIsSuperChatForGood()
    {
        return $this->container['is_super_chat_for_good'];
    }

    /**
     * Sets is_super_chat_for_good
     *
     * @param bool $is_super_chat_for_good True if this event is a Super Chat for Good purchase.
     *
     * @return $this
     */
    public function setIsSuperChatForGood($is_super_chat_for_good)
    {
        $this->container['is_super_chat_for_good'] = $is_super_chat_for_good;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return int
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param int $message_type The tier for the paid message, which is based on the amount of money spent to purchase the message.
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets nonprofit
     *
     * @return \Swagger\Client\Model\Nonprofit
     */
    public function getNonprofit()
    {
        return $this->container['nonprofit'];
    }

    /**
     * Sets nonprofit
     *
     * @param \Swagger\Client\Model\Nonprofit $nonprofit If this event is a Super Chat for Good purchase, this field will contain information about the charity the purchase is donated to.
     *
     * @return $this
     */
    public function setNonprofit($nonprofit)
    {
        $this->container['nonprofit'] = $nonprofit;

        return $this;
    }

    /**
     * Gets supporter_details
     *
     * @return \Swagger\Client\Model\ChannelProfileDetails
     */
    public function getSupporterDetails()
    {
        return $this->container['supporter_details'];
    }

    /**
     * Sets supporter_details
     *
     * @param \Swagger\Client\Model\ChannelProfileDetails $supporter_details Details about the supporter.
     *
     * @return $this
     */
    public function setSupporterDetails($supporter_details)
    {
        $this->container['supporter_details'] = $supporter_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


