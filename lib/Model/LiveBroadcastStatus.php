<?php
/**
 * LiveBroadcastStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveBroadcastStatus Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveBroadcastStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiveBroadcastStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'life_cycle_status' => 'string',
        'live_broadcast_priority' => 'string',
        'privacy_status' => 'string',
        'recording_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'life_cycle_status' => null,
        'live_broadcast_priority' => null,
        'privacy_status' => null,
        'recording_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'life_cycle_status' => 'lifeCycleStatus',
        'live_broadcast_priority' => 'liveBroadcastPriority',
        'privacy_status' => 'privacyStatus',
        'recording_status' => 'recordingStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'life_cycle_status' => 'setLifeCycleStatus',
        'live_broadcast_priority' => 'setLiveBroadcastPriority',
        'privacy_status' => 'setPrivacyStatus',
        'recording_status' => 'setRecordingStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'life_cycle_status' => 'getLifeCycleStatus',
        'live_broadcast_priority' => 'getLiveBroadcastPriority',
        'privacy_status' => 'getPrivacyStatus',
        'recording_status' => 'getRecordingStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LIFE_CYCLE_STATUS_ABANDONED = 'abandoned';
    const LIFE_CYCLE_STATUS_COMPLETE = 'complete';
    const LIFE_CYCLE_STATUS_COMPLETE_STARTING = 'completeStarting';
    const LIFE_CYCLE_STATUS_CREATED = 'created';
    const LIFE_CYCLE_STATUS_LIVE = 'live';
    const LIFE_CYCLE_STATUS_LIVE_STARTING = 'liveStarting';
    const LIFE_CYCLE_STATUS_READY = 'ready';
    const LIFE_CYCLE_STATUS_RECLAIMED = 'reclaimed';
    const LIFE_CYCLE_STATUS_REVOKED = 'revoked';
    const LIFE_CYCLE_STATUS_TEST_STARTING = 'testStarting';
    const LIFE_CYCLE_STATUS_TESTING = 'testing';
    const LIVE_BROADCAST_PRIORITY_HIGH = 'high';
    const LIVE_BROADCAST_PRIORITY_LOW = 'low';
    const LIVE_BROADCAST_PRIORITY_NORMAL = 'normal';
    const PRIVACY_STATUS__PRIVATE = 'private';
    const PRIVACY_STATUS__PUBLIC = 'public';
    const PRIVACY_STATUS_UNLISTED = 'unlisted';
    const RECORDING_STATUS_NOT_RECORDING = 'notRecording';
    const RECORDING_STATUS_RECORDED = 'recorded';
    const RECORDING_STATUS_RECORDING = 'recording';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLifeCycleStatusAllowableValues()
    {
        return [
            self::LIFE_CYCLE_STATUS_ABANDONED,
            self::LIFE_CYCLE_STATUS_COMPLETE,
            self::LIFE_CYCLE_STATUS_COMPLETE_STARTING,
            self::LIFE_CYCLE_STATUS_CREATED,
            self::LIFE_CYCLE_STATUS_LIVE,
            self::LIFE_CYCLE_STATUS_LIVE_STARTING,
            self::LIFE_CYCLE_STATUS_READY,
            self::LIFE_CYCLE_STATUS_RECLAIMED,
            self::LIFE_CYCLE_STATUS_REVOKED,
            self::LIFE_CYCLE_STATUS_TEST_STARTING,
            self::LIFE_CYCLE_STATUS_TESTING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLiveBroadcastPriorityAllowableValues()
    {
        return [
            self::LIVE_BROADCAST_PRIORITY_HIGH,
            self::LIVE_BROADCAST_PRIORITY_LOW,
            self::LIVE_BROADCAST_PRIORITY_NORMAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivacyStatusAllowableValues()
    {
        return [
            self::PRIVACY_STATUS__PRIVATE,
            self::PRIVACY_STATUS__PUBLIC,
            self::PRIVACY_STATUS_UNLISTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecordingStatusAllowableValues()
    {
        return [
            self::RECORDING_STATUS_NOT_RECORDING,
            self::RECORDING_STATUS_RECORDED,
            self::RECORDING_STATUS_RECORDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['life_cycle_status'] = isset($data['life_cycle_status']) ? $data['life_cycle_status'] : null;
        $this->container['live_broadcast_priority'] = isset($data['live_broadcast_priority']) ? $data['live_broadcast_priority'] : null;
        $this->container['privacy_status'] = isset($data['privacy_status']) ? $data['privacy_status'] : null;
        $this->container['recording_status'] = isset($data['recording_status']) ? $data['recording_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLifeCycleStatusAllowableValues();
        if (!in_array($this->container['life_cycle_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'life_cycle_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLiveBroadcastPriorityAllowableValues();
        if (!in_array($this->container['live_broadcast_priority'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'live_broadcast_priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!in_array($this->container['privacy_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'privacy_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecordingStatusAllowableValues();
        if (!in_array($this->container['recording_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recording_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getLifeCycleStatusAllowableValues();
        if (!in_array($this->container['life_cycle_status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getLiveBroadcastPriorityAllowableValues();
        if (!in_array($this->container['live_broadcast_priority'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!in_array($this->container['privacy_status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getRecordingStatusAllowableValues();
        if (!in_array($this->container['recording_status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets life_cycle_status
     *
     * @return string
     */
    public function getLifeCycleStatus()
    {
        return $this->container['life_cycle_status'];
    }

    /**
     * Sets life_cycle_status
     *
     * @param string $life_cycle_status The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
     *
     * @return $this
     */
    public function setLifeCycleStatus($life_cycle_status)
    {
        $allowedValues = $this->getLifeCycleStatusAllowableValues();
        if (!is_null($life_cycle_status) && !in_array($life_cycle_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'life_cycle_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['life_cycle_status'] = $life_cycle_status;

        return $this;
    }

    /**
     * Gets live_broadcast_priority
     *
     * @return string
     */
    public function getLiveBroadcastPriority()
    {
        return $this->container['live_broadcast_priority'];
    }

    /**
     * Sets live_broadcast_priority
     *
     * @param string $live_broadcast_priority Priority of the live broadcast event (internal state).
     *
     * @return $this
     */
    public function setLiveBroadcastPriority($live_broadcast_priority)
    {
        $allowedValues = $this->getLiveBroadcastPriorityAllowableValues();
        if (!is_null($live_broadcast_priority) && !in_array($live_broadcast_priority, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'live_broadcast_priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['live_broadcast_priority'] = $live_broadcast_priority;

        return $this;
    }

    /**
     * Gets privacy_status
     *
     * @return string
     */
    public function getPrivacyStatus()
    {
        return $this->container['privacy_status'];
    }

    /**
     * Sets privacy_status
     *
     * @param string $privacy_status The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
     *
     * @return $this
     */
    public function setPrivacyStatus($privacy_status)
    {
        $allowedValues = $this->getPrivacyStatusAllowableValues();
        if (!is_null($privacy_status) && !in_array($privacy_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'privacy_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['privacy_status'] = $privacy_status;

        return $this;
    }

    /**
     * Gets recording_status
     *
     * @return string
     */
    public function getRecordingStatus()
    {
        return $this->container['recording_status'];
    }

    /**
     * Sets recording_status
     *
     * @param string $recording_status The broadcast's recording status.
     *
     * @return $this
     */
    public function setRecordingStatus($recording_status)
    {
        $allowedValues = $this->getRecordingStatusAllowableValues();
        if (!is_null($recording_status) && !in_array($recording_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recording_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recording_status'] = $recording_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


