<?php
/**
 * ActivityContentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ActivityContentDetails Class Doc Comment
 *
 * @category Class
 * @description Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityContentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivityContentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bulletin' => '\Swagger\Client\Model\ActivityContentDetailsBulletin',
        'channel_item' => '\Swagger\Client\Model\ActivityContentDetailsChannelItem',
        'comment' => '\Swagger\Client\Model\ActivityContentDetailsComment',
        'favorite' => '\Swagger\Client\Model\ActivityContentDetailsFavorite',
        'like' => '\Swagger\Client\Model\ActivityContentDetailsLike',
        'playlist_item' => '\Swagger\Client\Model\ActivityContentDetailsPlaylistItem',
        'promoted_item' => '\Swagger\Client\Model\ActivityContentDetailsPromotedItem',
        'recommendation' => '\Swagger\Client\Model\ActivityContentDetailsRecommendation',
        'social' => '\Swagger\Client\Model\ActivityContentDetailsSocial',
        'subscription' => '\Swagger\Client\Model\ActivityContentDetailsSubscription',
        'upload' => '\Swagger\Client\Model\ActivityContentDetailsUpload'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bulletin' => null,
        'channel_item' => null,
        'comment' => null,
        'favorite' => null,
        'like' => null,
        'playlist_item' => null,
        'promoted_item' => null,
        'recommendation' => null,
        'social' => null,
        'subscription' => null,
        'upload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bulletin' => 'bulletin',
        'channel_item' => 'channelItem',
        'comment' => 'comment',
        'favorite' => 'favorite',
        'like' => 'like',
        'playlist_item' => 'playlistItem',
        'promoted_item' => 'promotedItem',
        'recommendation' => 'recommendation',
        'social' => 'social',
        'subscription' => 'subscription',
        'upload' => 'upload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bulletin' => 'setBulletin',
        'channel_item' => 'setChannelItem',
        'comment' => 'setComment',
        'favorite' => 'setFavorite',
        'like' => 'setLike',
        'playlist_item' => 'setPlaylistItem',
        'promoted_item' => 'setPromotedItem',
        'recommendation' => 'setRecommendation',
        'social' => 'setSocial',
        'subscription' => 'setSubscription',
        'upload' => 'setUpload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bulletin' => 'getBulletin',
        'channel_item' => 'getChannelItem',
        'comment' => 'getComment',
        'favorite' => 'getFavorite',
        'like' => 'getLike',
        'playlist_item' => 'getPlaylistItem',
        'promoted_item' => 'getPromotedItem',
        'recommendation' => 'getRecommendation',
        'social' => 'getSocial',
        'subscription' => 'getSubscription',
        'upload' => 'getUpload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bulletin'] = isset($data['bulletin']) ? $data['bulletin'] : null;
        $this->container['channel_item'] = isset($data['channel_item']) ? $data['channel_item'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['favorite'] = isset($data['favorite']) ? $data['favorite'] : null;
        $this->container['like'] = isset($data['like']) ? $data['like'] : null;
        $this->container['playlist_item'] = isset($data['playlist_item']) ? $data['playlist_item'] : null;
        $this->container['promoted_item'] = isset($data['promoted_item']) ? $data['promoted_item'] : null;
        $this->container['recommendation'] = isset($data['recommendation']) ? $data['recommendation'] : null;
        $this->container['social'] = isset($data['social']) ? $data['social'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['upload'] = isset($data['upload']) ? $data['upload'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bulletin
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsBulletin
     */
    public function getBulletin()
    {
        return $this->container['bulletin'];
    }

    /**
     * Sets bulletin
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsBulletin $bulletin The bulletin object contains details about a channel bulletin post. This object is only present if the snippet.type is bulletin.
     *
     * @return $this
     */
    public function setBulletin($bulletin)
    {
        $this->container['bulletin'] = $bulletin;

        return $this;
    }

    /**
     * Gets channel_item
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsChannelItem
     */
    public function getChannelItem()
    {
        return $this->container['channel_item'];
    }

    /**
     * Sets channel_item
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsChannelItem $channel_item The channelItem object contains details about a resource which was added to a channel. This property is only present if the snippet.type is channelItem.
     *
     * @return $this
     */
    public function setChannelItem($channel_item)
    {
        $this->container['channel_item'] = $channel_item;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsComment
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsComment $comment The comment object contains information about a resource that received a comment. This property is only present if the snippet.type is comment.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsFavorite
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsFavorite $favorite The favorite object contains information about a video that was marked as a favorite video. This property is only present if the snippet.type is favorite.
     *
     * @return $this
     */
    public function setFavorite($favorite)
    {
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets like
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsLike
     */
    public function getLike()
    {
        return $this->container['like'];
    }

    /**
     * Sets like
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsLike $like The like object contains information about a resource that received a positive (like) rating. This property is only present if the snippet.type is like.
     *
     * @return $this
     */
    public function setLike($like)
    {
        $this->container['like'] = $like;

        return $this;
    }

    /**
     * Gets playlist_item
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsPlaylistItem
     */
    public function getPlaylistItem()
    {
        return $this->container['playlist_item'];
    }

    /**
     * Sets playlist_item
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsPlaylistItem $playlist_item The playlistItem object contains information about a new playlist item. This property is only present if the snippet.type is playlistItem.
     *
     * @return $this
     */
    public function setPlaylistItem($playlist_item)
    {
        $this->container['playlist_item'] = $playlist_item;

        return $this;
    }

    /**
     * Gets promoted_item
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsPromotedItem
     */
    public function getPromotedItem()
    {
        return $this->container['promoted_item'];
    }

    /**
     * Sets promoted_item
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsPromotedItem $promoted_item The promotedItem object contains details about a resource which is being promoted. This property is only present if the snippet.type is promotedItem.
     *
     * @return $this
     */
    public function setPromotedItem($promoted_item)
    {
        $this->container['promoted_item'] = $promoted_item;

        return $this;
    }

    /**
     * Gets recommendation
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsRecommendation
     */
    public function getRecommendation()
    {
        return $this->container['recommendation'];
    }

    /**
     * Sets recommendation
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsRecommendation $recommendation The recommendation object contains information about a recommended resource. This property is only present if the snippet.type is recommendation.
     *
     * @return $this
     */
    public function setRecommendation($recommendation)
    {
        $this->container['recommendation'] = $recommendation;

        return $this;
    }

    /**
     * Gets social
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsSocial
     */
    public function getSocial()
    {
        return $this->container['social'];
    }

    /**
     * Sets social
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsSocial $social The social object contains details about a social network post. This property is only present if the snippet.type is social.
     *
     * @return $this
     */
    public function setSocial($social)
    {
        $this->container['social'] = $social;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsSubscription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsSubscription $subscription The subscription object contains information about a channel that a user subscribed to. This property is only present if the snippet.type is subscription.
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets upload
     *
     * @return \Swagger\Client\Model\ActivityContentDetailsUpload
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param \Swagger\Client\Model\ActivityContentDetailsUpload $upload The upload object contains information about the uploaded video. This property is only present if the snippet.type is upload.
     *
     * @return $this
     */
    public function setUpload($upload)
    {
        $this->container['upload'] = $upload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


