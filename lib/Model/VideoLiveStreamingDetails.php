<?php
/**
 * VideoLiveStreamingDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VideoLiveStreamingDetails Class Doc Comment
 *
 * @category Class
 * @description Details about the live streaming metadata.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoLiveStreamingDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VideoLiveStreamingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_live_chat_id' => 'string',
        'actual_end_time' => '\DateTime',
        'actual_start_time' => '\DateTime',
        'concurrent_viewers' => 'string',
        'scheduled_end_time' => '\DateTime',
        'scheduled_start_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_live_chat_id' => null,
        'actual_end_time' => 'date-time',
        'actual_start_time' => 'date-time',
        'concurrent_viewers' => 'uint64',
        'scheduled_end_time' => 'date-time',
        'scheduled_start_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_live_chat_id' => 'activeLiveChatId',
        'actual_end_time' => 'actualEndTime',
        'actual_start_time' => 'actualStartTime',
        'concurrent_viewers' => 'concurrentViewers',
        'scheduled_end_time' => 'scheduledEndTime',
        'scheduled_start_time' => 'scheduledStartTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_live_chat_id' => 'setActiveLiveChatId',
        'actual_end_time' => 'setActualEndTime',
        'actual_start_time' => 'setActualStartTime',
        'concurrent_viewers' => 'setConcurrentViewers',
        'scheduled_end_time' => 'setScheduledEndTime',
        'scheduled_start_time' => 'setScheduledStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_live_chat_id' => 'getActiveLiveChatId',
        'actual_end_time' => 'getActualEndTime',
        'actual_start_time' => 'getActualStartTime',
        'concurrent_viewers' => 'getConcurrentViewers',
        'scheduled_end_time' => 'getScheduledEndTime',
        'scheduled_start_time' => 'getScheduledStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_live_chat_id'] = isset($data['active_live_chat_id']) ? $data['active_live_chat_id'] : null;
        $this->container['actual_end_time'] = isset($data['actual_end_time']) ? $data['actual_end_time'] : null;
        $this->container['actual_start_time'] = isset($data['actual_start_time']) ? $data['actual_start_time'] : null;
        $this->container['concurrent_viewers'] = isset($data['concurrent_viewers']) ? $data['concurrent_viewers'] : null;
        $this->container['scheduled_end_time'] = isset($data['scheduled_end_time']) ? $data['scheduled_end_time'] : null;
        $this->container['scheduled_start_time'] = isset($data['scheduled_start_time']) ? $data['scheduled_start_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active_live_chat_id
     *
     * @return string
     */
    public function getActiveLiveChatId()
    {
        return $this->container['active_live_chat_id'];
    }

    /**
     * Sets active_live_chat_id
     *
     * @param string $active_live_chat_id The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
     *
     * @return $this
     */
    public function setActiveLiveChatId($active_live_chat_id)
    {
        $this->container['active_live_chat_id'] = $active_live_chat_id;

        return $this;
    }

    /**
     * Gets actual_end_time
     *
     * @return \DateTime
     */
    public function getActualEndTime()
    {
        return $this->container['actual_end_time'];
    }

    /**
     * Sets actual_end_time
     *
     * @param \DateTime $actual_end_time The time that the broadcast actually ended. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast is over.
     *
     * @return $this
     */
    public function setActualEndTime($actual_end_time)
    {
        $this->container['actual_end_time'] = $actual_end_time;

        return $this;
    }

    /**
     * Gets actual_start_time
     *
     * @return \DateTime
     */
    public function getActualStartTime()
    {
        return $this->container['actual_start_time'];
    }

    /**
     * Sets actual_start_time
     *
     * @param \DateTime $actual_start_time The time that the broadcast actually started. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast begins.
     *
     * @return $this
     */
    public function setActualStartTime($actual_start_time)
    {
        $this->container['actual_start_time'] = $actual_start_time;

        return $this;
    }

    /**
     * Gets concurrent_viewers
     *
     * @return string
     */
    public function getConcurrentViewers()
    {
        return $this->container['concurrent_viewers'];
    }

    /**
     * Sets concurrent_viewers
     *
     * @param string $concurrent_viewers The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
     *
     * @return $this
     */
    public function setConcurrentViewers($concurrent_viewers)
    {
        $this->container['concurrent_viewers'] = $concurrent_viewers;

        return $this;
    }

    /**
     * Gets scheduled_end_time
     *
     * @return \DateTime
     */
    public function getScheduledEndTime()
    {
        return $this->container['scheduled_end_time'];
    }

    /**
     * Sets scheduled_end_time
     *
     * @param \DateTime $scheduled_end_time The time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely.
     *
     * @return $this
     */
    public function setScheduledEndTime($scheduled_end_time)
    {
        $this->container['scheduled_end_time'] = $scheduled_end_time;

        return $this;
    }

    /**
     * Gets scheduled_start_time
     *
     * @return \DateTime
     */
    public function getScheduledStartTime()
    {
        return $this->container['scheduled_start_time'];
    }

    /**
     * Sets scheduled_start_time
     *
     * @param \DateTime $scheduled_start_time The time that the broadcast is scheduled to begin. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
     *
     * @return $this
     */
    public function setScheduledStartTime($scheduled_start_time)
    {
        $this->container['scheduled_start_time'] = $scheduled_start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


