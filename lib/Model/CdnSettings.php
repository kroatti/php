<?php
/**
 * CdnSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CdnSettings Class Doc Comment
 *
 * @category Class
 * @description Brief description of the live stream cdn settings.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CdnSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CdnSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'format' => 'string',
        'frame_rate' => 'string',
        'ingestion_info' => '\Swagger\Client\Model\IngestionInfo',
        'ingestion_type' => 'string',
        'resolution' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'format' => null,
        'frame_rate' => null,
        'ingestion_info' => null,
        'ingestion_type' => null,
        'resolution' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'format' => 'format',
        'frame_rate' => 'frameRate',
        'ingestion_info' => 'ingestionInfo',
        'ingestion_type' => 'ingestionType',
        'resolution' => 'resolution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'format' => 'setFormat',
        'frame_rate' => 'setFrameRate',
        'ingestion_info' => 'setIngestionInfo',
        'ingestion_type' => 'setIngestionType',
        'resolution' => 'setResolution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'format' => 'getFormat',
        'frame_rate' => 'getFrameRate',
        'ingestion_info' => 'getIngestionInfo',
        'ingestion_type' => 'getIngestionType',
        'resolution' => 'getResolution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FRAME_RATE__30FPS = '30fps';
    const FRAME_RATE__60FPS = '60fps';
    const FRAME_RATE_VARIABLE = 'variable';
    const INGESTION_TYPE_DASH = 'dash';
    const INGESTION_TYPE_RTMP = 'rtmp';
    const RESOLUTION__1080P = '1080p';
    const RESOLUTION__1440P = '1440p';
    const RESOLUTION__2160P = '2160p';
    const RESOLUTION__240P = '240p';
    const RESOLUTION__360P = '360p';
    const RESOLUTION__480P = '480p';
    const RESOLUTION__720P = '720p';
    const RESOLUTION_VARIABLE = 'variable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrameRateAllowableValues()
    {
        return [
            self::FRAME_RATE__30FPS,
            self::FRAME_RATE__60FPS,
            self::FRAME_RATE_VARIABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIngestionTypeAllowableValues()
    {
        return [
            self::INGESTION_TYPE_DASH,
            self::INGESTION_TYPE_RTMP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolutionAllowableValues()
    {
        return [
            self::RESOLUTION__1080P,
            self::RESOLUTION__1440P,
            self::RESOLUTION__2160P,
            self::RESOLUTION__240P,
            self::RESOLUTION__360P,
            self::RESOLUTION__480P,
            self::RESOLUTION__720P,
            self::RESOLUTION_VARIABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['frame_rate'] = isset($data['frame_rate']) ? $data['frame_rate'] : null;
        $this->container['ingestion_info'] = isset($data['ingestion_info']) ? $data['ingestion_info'] : null;
        $this->container['ingestion_type'] = isset($data['ingestion_type']) ? $data['ingestion_type'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFrameRateAllowableValues();
        if (!in_array($this->container['frame_rate'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frame_rate', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIngestionTypeAllowableValues();
        if (!in_array($this->container['ingestion_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ingestion_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResolutionAllowableValues();
        if (!in_array($this->container['resolution'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resolution', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getFrameRateAllowableValues();
        if (!in_array($this->container['frame_rate'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getIngestionTypeAllowableValues();
        if (!in_array($this->container['ingestion_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getResolutionAllowableValues();
        if (!in_array($this->container['resolution'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format The format of the video stream that you are sending to Youtube.
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets frame_rate
     *
     * @return string
     */
    public function getFrameRate()
    {
        return $this->container['frame_rate'];
    }

    /**
     * Sets frame_rate
     *
     * @param string $frame_rate The frame rate of the inbound video data.
     *
     * @return $this
     */
    public function setFrameRate($frame_rate)
    {
        $allowedValues = $this->getFrameRateAllowableValues();
        if (!is_null($frame_rate) && !in_array($frame_rate, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frame_rate', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frame_rate'] = $frame_rate;

        return $this;
    }

    /**
     * Gets ingestion_info
     *
     * @return \Swagger\Client\Model\IngestionInfo
     */
    public function getIngestionInfo()
    {
        return $this->container['ingestion_info'];
    }

    /**
     * Sets ingestion_info
     *
     * @param \Swagger\Client\Model\IngestionInfo $ingestion_info The ingestionInfo object contains information that YouTube provides that you need to transmit your RTMP or HTTP stream to YouTube.
     *
     * @return $this
     */
    public function setIngestionInfo($ingestion_info)
    {
        $this->container['ingestion_info'] = $ingestion_info;

        return $this;
    }

    /**
     * Gets ingestion_type
     *
     * @return string
     */
    public function getIngestionType()
    {
        return $this->container['ingestion_type'];
    }

    /**
     * Sets ingestion_type
     *
     * @param string $ingestion_type The method or protocol used to transmit the video stream.
     *
     * @return $this
     */
    public function setIngestionType($ingestion_type)
    {
        $allowedValues = $this->getIngestionTypeAllowableValues();
        if (!is_null($ingestion_type) && !in_array($ingestion_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ingestion_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ingestion_type'] = $ingestion_type;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string $resolution The resolution of the inbound video data.
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $allowedValues = $this->getResolutionAllowableValues();
        if (!is_null($resolution) && !in_array($resolution, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resolution', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolution'] = $resolution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


