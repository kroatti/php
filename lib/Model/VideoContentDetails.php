<?php
/**
 * VideoContentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VideoContentDetails Class Doc Comment
 *
 * @category Class
 * @description Details about the content of a YouTube Video.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoContentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VideoContentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'caption' => 'string',
        'content_rating' => '\Swagger\Client\Model\ContentRating',
        'country_restriction' => '\Swagger\Client\Model\AccessPolicy',
        'definition' => 'string',
        'dimension' => 'string',
        'duration' => 'string',
        'has_custom_thumbnail' => 'bool',
        'licensed_content' => 'bool',
        'projection' => 'string',
        'region_restriction' => '\Swagger\Client\Model\VideoContentDetailsRegionRestriction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'caption' => null,
        'content_rating' => null,
        'country_restriction' => null,
        'definition' => null,
        'dimension' => null,
        'duration' => null,
        'has_custom_thumbnail' => null,
        'licensed_content' => null,
        'projection' => null,
        'region_restriction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caption' => 'caption',
        'content_rating' => 'contentRating',
        'country_restriction' => 'countryRestriction',
        'definition' => 'definition',
        'dimension' => 'dimension',
        'duration' => 'duration',
        'has_custom_thumbnail' => 'hasCustomThumbnail',
        'licensed_content' => 'licensedContent',
        'projection' => 'projection',
        'region_restriction' => 'regionRestriction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caption' => 'setCaption',
        'content_rating' => 'setContentRating',
        'country_restriction' => 'setCountryRestriction',
        'definition' => 'setDefinition',
        'dimension' => 'setDimension',
        'duration' => 'setDuration',
        'has_custom_thumbnail' => 'setHasCustomThumbnail',
        'licensed_content' => 'setLicensedContent',
        'projection' => 'setProjection',
        'region_restriction' => 'setRegionRestriction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caption' => 'getCaption',
        'content_rating' => 'getContentRating',
        'country_restriction' => 'getCountryRestriction',
        'definition' => 'getDefinition',
        'dimension' => 'getDimension',
        'duration' => 'getDuration',
        'has_custom_thumbnail' => 'getHasCustomThumbnail',
        'licensed_content' => 'getLicensedContent',
        'projection' => 'getProjection',
        'region_restriction' => 'getRegionRestriction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CAPTION_FALSE = 'false';
    const CAPTION_TRUE = 'true';
    const DEFINITION_HD = 'hd';
    const DEFINITION_SD = 'sd';
    const PROJECTION__360 = '360';
    const PROJECTION_RECTANGULAR = 'rectangular';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCaptionAllowableValues()
    {
        return [
            self::CAPTION_FALSE,
            self::CAPTION_TRUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefinitionAllowableValues()
    {
        return [
            self::DEFINITION_HD,
            self::DEFINITION_SD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectionAllowableValues()
    {
        return [
            self::PROJECTION__360,
            self::PROJECTION_RECTANGULAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['content_rating'] = isset($data['content_rating']) ? $data['content_rating'] : null;
        $this->container['country_restriction'] = isset($data['country_restriction']) ? $data['country_restriction'] : null;
        $this->container['definition'] = isset($data['definition']) ? $data['definition'] : null;
        $this->container['dimension'] = isset($data['dimension']) ? $data['dimension'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['has_custom_thumbnail'] = isset($data['has_custom_thumbnail']) ? $data['has_custom_thumbnail'] : null;
        $this->container['licensed_content'] = isset($data['licensed_content']) ? $data['licensed_content'] : null;
        $this->container['projection'] = isset($data['projection']) ? $data['projection'] : null;
        $this->container['region_restriction'] = isset($data['region_restriction']) ? $data['region_restriction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCaptionAllowableValues();
        if (!in_array($this->container['caption'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'caption', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefinitionAllowableValues();
        if (!in_array($this->container['definition'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'definition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProjectionAllowableValues();
        if (!in_array($this->container['projection'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'projection', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCaptionAllowableValues();
        if (!in_array($this->container['caption'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getDefinitionAllowableValues();
        if (!in_array($this->container['definition'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getProjectionAllowableValues();
        if (!in_array($this->container['projection'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption The value of captions indicates whether the video has captions or not.
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $allowedValues = $this->getCaptionAllowableValues();
        if (!is_null($caption) && !in_array($caption, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'caption', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets content_rating
     *
     * @return \Swagger\Client\Model\ContentRating
     */
    public function getContentRating()
    {
        return $this->container['content_rating'];
    }

    /**
     * Sets content_rating
     *
     * @param \Swagger\Client\Model\ContentRating $content_rating Specifies the ratings that the video received under various rating schemes.
     *
     * @return $this
     */
    public function setContentRating($content_rating)
    {
        $this->container['content_rating'] = $content_rating;

        return $this;
    }

    /**
     * Gets country_restriction
     *
     * @return \Swagger\Client\Model\AccessPolicy
     */
    public function getCountryRestriction()
    {
        return $this->container['country_restriction'];
    }

    /**
     * Sets country_restriction
     *
     * @param \Swagger\Client\Model\AccessPolicy $country_restriction The countryRestriction object contains information about the countries where a video is (or is not) viewable.
     *
     * @return $this
     */
    public function setCountryRestriction($country_restriction)
    {
        $this->container['country_restriction'] = $country_restriction;

        return $this;
    }

    /**
     * Gets definition
     *
     * @return string
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param string $definition The value of definition indicates whether the video is available in high definition or only in standard definition.
     *
     * @return $this
     */
    public function setDefinition($definition)
    {
        $allowedValues = $this->getDefinitionAllowableValues();
        if (!is_null($definition) && !in_array($definition, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'definition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return string
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param string $dimension The value of dimension indicates whether the video is available in 3D or in 2D.
     *
     * @return $this
     */
    public function setDimension($dimension)
    {
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets has_custom_thumbnail
     *
     * @return bool
     */
    public function getHasCustomThumbnail()
    {
        return $this->container['has_custom_thumbnail'];
    }

    /**
     * Sets has_custom_thumbnail
     *
     * @param bool $has_custom_thumbnail Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
     *
     * @return $this
     */
    public function setHasCustomThumbnail($has_custom_thumbnail)
    {
        $this->container['has_custom_thumbnail'] = $has_custom_thumbnail;

        return $this;
    }

    /**
     * Gets licensed_content
     *
     * @return bool
     */
    public function getLicensedContent()
    {
        return $this->container['licensed_content'];
    }

    /**
     * Sets licensed_content
     *
     * @param bool $licensed_content The value of is_license_content indicates whether the video is licensed content.
     *
     * @return $this
     */
    public function setLicensedContent($licensed_content)
    {
        $this->container['licensed_content'] = $licensed_content;

        return $this;
    }

    /**
     * Gets projection
     *
     * @return string
     */
    public function getProjection()
    {
        return $this->container['projection'];
    }

    /**
     * Sets projection
     *
     * @param string $projection Specifies the projection format of the video.
     *
     * @return $this
     */
    public function setProjection($projection)
    {
        $allowedValues = $this->getProjectionAllowableValues();
        if (!is_null($projection) && !in_array($projection, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'projection', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['projection'] = $projection;

        return $this;
    }

    /**
     * Gets region_restriction
     *
     * @return \Swagger\Client\Model\VideoContentDetailsRegionRestriction
     */
    public function getRegionRestriction()
    {
        return $this->container['region_restriction'];
    }

    /**
     * Sets region_restriction
     *
     * @param \Swagger\Client\Model\VideoContentDetailsRegionRestriction $region_restriction The regionRestriction object contains information about the countries where a video is (or is not) viewable. The object will contain either the contentDetails.regionRestriction.allowed property or the contentDetails.regionRestriction.blocked property.
     *
     * @return $this
     */
    public function setRegionRestriction($region_restriction)
    {
        $this->container['region_restriction'] = $region_restriction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


