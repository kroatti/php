<?php
/**
 * ActivitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ActivitiesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivitiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation youtubeActivitiesInsert
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Activity $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Activity
     */
    public function youtubeActivitiesInsert($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        list($response) = $this->youtubeActivitiesInsertWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);
        return $response;
    }

    /**
     * Operation youtubeActivitiesInsertWithHttpInfo
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Activity $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Activity, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeActivitiesInsertWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Activity';
        $request = $this->youtubeActivitiesInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Activity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeActivitiesInsertAsync
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Activity $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeActivitiesInsertAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        return $this->youtubeActivitiesInsertAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeActivitiesInsertAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Activity $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeActivitiesInsertAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Activity';
        $request = $this->youtubeActivitiesInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeActivitiesInsert'
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Activity $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeActivitiesInsertRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeActivitiesInsert'
            );
        }

        $resourcePath = '/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeActivitiesList
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel&#39;s activities. (optional)
     * @param  bool $home Set this parameter&#39;s value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s activities. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $published_before The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user&#39;s previous activity on YouTube does not provide enough information to generate the activity feed. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ActivityListResponse
     */
    public function youtubeActivitiesList($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $home = null, $max_results = '5', $mine = null, $page_token = null, $published_after = null, $published_before = null, $region_code = null)
    {
        list($response) = $this->youtubeActivitiesListWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $home, $max_results, $mine, $page_token, $published_after, $published_before, $region_code);
        return $response;
    }

    /**
     * Operation youtubeActivitiesListWithHttpInfo
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel&#39;s activities. (optional)
     * @param  bool $home Set this parameter&#39;s value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s activities. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $published_before The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user&#39;s previous activity on YouTube does not provide enough information to generate the activity feed. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ActivityListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeActivitiesListWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $home = null, $max_results = '5', $mine = null, $page_token = null, $published_after = null, $published_before = null, $region_code = null)
    {
        $returnType = '\Swagger\Client\Model\ActivityListResponse';
        $request = $this->youtubeActivitiesListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $home, $max_results, $mine, $page_token, $published_after, $published_before, $region_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ActivityListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeActivitiesListAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel&#39;s activities. (optional)
     * @param  bool $home Set this parameter&#39;s value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s activities. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $published_before The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user&#39;s previous activity on YouTube does not provide enough information to generate the activity feed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeActivitiesListAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $home = null, $max_results = '5', $mine = null, $page_token = null, $published_after = null, $published_before = null, $region_code = null)
    {
        return $this->youtubeActivitiesListAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $home, $max_results, $mine, $page_token, $published_after, $published_before, $region_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeActivitiesListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel&#39;s activities. (optional)
     * @param  bool $home Set this parameter&#39;s value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s activities. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $published_before The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user&#39;s previous activity on YouTube does not provide enough information to generate the activity feed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeActivitiesListAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $home = null, $max_results = '5', $mine = null, $page_token = null, $published_after = null, $published_before = null, $region_code = null)
    {
        $returnType = '\Swagger\Client\Model\ActivityListResponse';
        $request = $this->youtubeActivitiesListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $home, $max_results, $mine, $page_token, $published_after, $published_before, $region_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeActivitiesList'
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel&#39;s activities. (optional)
     * @param  bool $home Set this parameter&#39;s value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s activities. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $published_before The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user&#39;s previous activity on YouTube does not provide enough information to generate the activity feed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeActivitiesListRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $home = null, $max_results = '5', $mine = null, $page_token = null, $published_after = null, $published_before = null, $region_code = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeActivitiesList'
            );
        }
        if ($max_results !== null && $max_results > 50) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling ActivitiesApi.youtubeActivitiesList, must be smaller than or equal to 50.');
        }
        if ($max_results !== null && $max_results < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling ActivitiesApi.youtubeActivitiesList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($channel_id !== null) {
            $queryParams['channelId'] = ObjectSerializer::toQueryValue($channel_id);
        }
        // query params
        if ($home !== null) {
            $queryParams['home'] = ObjectSerializer::toQueryValue($home);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results);
        }
        // query params
        if ($mine !== null) {
            $queryParams['mine'] = ObjectSerializer::toQueryValue($mine);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($published_after !== null) {
            $queryParams['publishedAfter'] = ObjectSerializer::toQueryValue($published_after);
        }
        // query params
        if ($published_before !== null) {
            $queryParams['publishedBefore'] = ObjectSerializer::toQueryValue($published_before);
        }
        // query params
        if ($region_code !== null) {
            $queryParams['regionCode'] = ObjectSerializer::toQueryValue($region_code);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
