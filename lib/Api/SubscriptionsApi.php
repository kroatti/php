<?php
/**
 * SubscriptionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SubscriptionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation youtubeSubscriptionsDelete
     *
     * @param  string $id The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeSubscriptionsDelete($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $this->youtubeSubscriptionsDeleteWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);
    }

    /**
     * Operation youtubeSubscriptionsDeleteWithHttpInfo
     *
     * @param  string $id The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeSubscriptionsDeleteWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $returnType = '';
        $request = $this->youtubeSubscriptionsDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeSubscriptionsDeleteAsync
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsDeleteAsync($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        return $this->youtubeSubscriptionsDeleteAsyncWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeSubscriptionsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsDeleteAsyncWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $returnType = '';
        $request = $this->youtubeSubscriptionsDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeSubscriptionsDelete'
     *
     * @param  string $id The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeSubscriptionsDeleteRequest($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeSubscriptionsDelete'
            );
        }

        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeSubscriptionsInsert
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Subscription $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Subscription
     */
    public function youtubeSubscriptionsInsert($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        list($response) = $this->youtubeSubscriptionsInsertWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);
        return $response;
    }

    /**
     * Operation youtubeSubscriptionsInsertWithHttpInfo
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Subscription $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeSubscriptionsInsertWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Subscription';
        $request = $this->youtubeSubscriptionsInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeSubscriptionsInsertAsync
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Subscription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsInsertAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        return $this->youtubeSubscriptionsInsertAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeSubscriptionsInsertAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Subscription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsInsertAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Subscription';
        $request = $this->youtubeSubscriptionsInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeSubscriptionsInsert'
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Subscription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeSubscriptionsInsertRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeSubscriptionsInsert'
            );
        }

        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeSubscriptionsList
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a YouTube channel ID. The API will only return that channel&#39;s subscriptions. (optional)
     * @param  string $for_channel_id The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s subscriptions. (optional)
     * @param  bool $my_recent_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first). (optional)
     * @param  bool $my_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in no particular order. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  string $order The order parameter specifies the method that will be used to sort resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SubscriptionListResponse
     */
    public function youtubeSubscriptionsList($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $for_channel_id = null, $id = null, $max_results = '5', $mine = null, $my_recent_subscribers = null, $my_subscribers = null, $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $order = 'relevance', $page_token = null)
    {
        list($response) = $this->youtubeSubscriptionsListWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $for_channel_id, $id, $max_results, $mine, $my_recent_subscribers, $my_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $order, $page_token);
        return $response;
    }

    /**
     * Operation youtubeSubscriptionsListWithHttpInfo
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a YouTube channel ID. The API will only return that channel&#39;s subscriptions. (optional)
     * @param  string $for_channel_id The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s subscriptions. (optional)
     * @param  bool $my_recent_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first). (optional)
     * @param  bool $my_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in no particular order. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  string $order The order parameter specifies the method that will be used to sort resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SubscriptionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeSubscriptionsListWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $for_channel_id = null, $id = null, $max_results = '5', $mine = null, $my_recent_subscribers = null, $my_subscribers = null, $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $order = 'relevance', $page_token = null)
    {
        $returnType = '\Swagger\Client\Model\SubscriptionListResponse';
        $request = $this->youtubeSubscriptionsListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $for_channel_id, $id, $max_results, $mine, $my_recent_subscribers, $my_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $order, $page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SubscriptionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeSubscriptionsListAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a YouTube channel ID. The API will only return that channel&#39;s subscriptions. (optional)
     * @param  string $for_channel_id The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s subscriptions. (optional)
     * @param  bool $my_recent_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first). (optional)
     * @param  bool $my_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in no particular order. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  string $order The order parameter specifies the method that will be used to sort resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsListAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $for_channel_id = null, $id = null, $max_results = '5', $mine = null, $my_recent_subscribers = null, $my_subscribers = null, $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $order = 'relevance', $page_token = null)
    {
        return $this->youtubeSubscriptionsListAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $for_channel_id, $id, $max_results, $mine, $my_recent_subscribers, $my_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $order, $page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeSubscriptionsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a YouTube channel ID. The API will only return that channel&#39;s subscriptions. (optional)
     * @param  string $for_channel_id The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s subscriptions. (optional)
     * @param  bool $my_recent_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first). (optional)
     * @param  bool $my_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in no particular order. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  string $order The order parameter specifies the method that will be used to sort resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSubscriptionsListAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $for_channel_id = null, $id = null, $max_results = '5', $mine = null, $my_recent_subscribers = null, $my_subscribers = null, $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $order = 'relevance', $page_token = null)
    {
        $returnType = '\Swagger\Client\Model\SubscriptionListResponse';
        $request = $this->youtubeSubscriptionsListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $for_channel_id, $id, $max_results, $mine, $my_recent_subscribers, $my_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $order, $page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeSubscriptionsList'
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part&#x3D;snippet, the API response will also contain all of those nested properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter specifies a YouTube channel ID. The API will only return that channel&#39;s subscriptions. (optional)
     * @param  string $for_channel_id The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  bool $mine Set this parameter&#39;s value to true to retrieve a feed of the authenticated user&#39;s subscriptions. (optional)
     * @param  bool $my_recent_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first). (optional)
     * @param  bool $my_subscribers Set this parameter&#39;s value to true to retrieve a feed of the subscribers of the authenticated user in no particular order. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  string $order The order parameter specifies the method that will be used to sort resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeSubscriptionsListRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $for_channel_id = null, $id = null, $max_results = '5', $mine = null, $my_recent_subscribers = null, $my_subscribers = null, $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $order = 'relevance', $page_token = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeSubscriptionsList'
            );
        }
        if ($max_results !== null && $max_results > 50) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling SubscriptionsApi.youtubeSubscriptionsList, must be smaller than or equal to 50.');
        }
        if ($max_results !== null && $max_results < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling SubscriptionsApi.youtubeSubscriptionsList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($channel_id !== null) {
            $queryParams['channelId'] = ObjectSerializer::toQueryValue($channel_id);
        }
        // query params
        if ($for_channel_id !== null) {
            $queryParams['forChannelId'] = ObjectSerializer::toQueryValue($for_channel_id);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results);
        }
        // query params
        if ($mine !== null) {
            $queryParams['mine'] = ObjectSerializer::toQueryValue($mine);
        }
        // query params
        if ($my_recent_subscribers !== null) {
            $queryParams['myRecentSubscribers'] = ObjectSerializer::toQueryValue($my_recent_subscribers);
        }
        // query params
        if ($my_subscribers !== null) {
            $queryParams['mySubscribers'] = ObjectSerializer::toQueryValue($my_subscribers);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($on_behalf_of_content_owner_channel !== null) {
            $queryParams['onBehalfOfContentOwnerChannel'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner_channel);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
