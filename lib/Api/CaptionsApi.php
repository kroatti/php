<?php
/**
 * CaptionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CaptionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CaptionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation youtubeCaptionsDelete
     *
     * @param  string $id The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeCaptionsDelete($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        $this->youtubeCaptionsDeleteWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner);
    }

    /**
     * Operation youtubeCaptionsDeleteWithHttpInfo
     *
     * @param  string $id The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeCaptionsDeleteWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeCaptionsDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeCaptionsDeleteAsync
     *
     * 
     *
     * @param  string $id The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsDeleteAsync($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeCaptionsDeleteAsyncWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeCaptionsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsDeleteAsyncWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeCaptionsDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeCaptionsDelete'
     *
     * @param  string $id The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeCaptionsDeleteRequest($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeCaptionsDelete'
            );
        }

        $resourcePath = '/captions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($on_behalf_of !== null) {
            $queryParams['onBehalfOf'] = ObjectSerializer::toQueryValue($on_behalf_of);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeCaptionsDownload
     *
     * @param  string $id The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $tfmt The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format. (optional)
     * @param  string $tlang The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeCaptionsDownload($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $tfmt = null, $tlang = null)
    {
        $this->youtubeCaptionsDownloadWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner, $tfmt, $tlang);
    }

    /**
     * Operation youtubeCaptionsDownloadWithHttpInfo
     *
     * @param  string $id The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $tfmt The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format. (optional)
     * @param  string $tlang The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeCaptionsDownloadWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $tfmt = null, $tlang = null)
    {
        $returnType = '';
        $request = $this->youtubeCaptionsDownloadRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner, $tfmt, $tlang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeCaptionsDownloadAsync
     *
     * 
     *
     * @param  string $id The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $tfmt The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format. (optional)
     * @param  string $tlang The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsDownloadAsync($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $tfmt = null, $tlang = null)
    {
        return $this->youtubeCaptionsDownloadAsyncWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner, $tfmt, $tlang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeCaptionsDownloadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $tfmt The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format. (optional)
     * @param  string $tlang The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsDownloadAsyncWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $tfmt = null, $tlang = null)
    {
        $returnType = '';
        $request = $this->youtubeCaptionsDownloadRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of, $on_behalf_of_content_owner, $tfmt, $tlang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeCaptionsDownload'
     *
     * @param  string $id The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $tfmt The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format. (optional)
     * @param  string $tlang The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeCaptionsDownloadRequest($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $tfmt = null, $tlang = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeCaptionsDownload'
            );
        }

        $resourcePath = '/captions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($on_behalf_of !== null) {
            $queryParams['onBehalfOf'] = ObjectSerializer::toQueryValue($on_behalf_of);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($tfmt !== null) {
            $queryParams['tfmt'] = ObjectSerializer::toQueryValue($tfmt);
        }
        // query params
        if ($tlang !== null) {
            $queryParams['tlang'] = ObjectSerializer::toQueryValue($tlang);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeCaptionsInsert
     *
     * @param  string $part The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.  You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Caption
     */
    public function youtubeCaptionsInsert($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        list($response) = $this->youtubeCaptionsInsertWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);
        return $response;
    }

    /**
     * Operation youtubeCaptionsInsertWithHttpInfo
     *
     * @param  string $part The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.  You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Caption, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeCaptionsInsertWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        $returnType = '\Swagger\Client\Model\Caption';
        $request = $this->youtubeCaptionsInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Caption',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeCaptionsInsertAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.  You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsInsertAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        return $this->youtubeCaptionsInsertAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeCaptionsInsertAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.  You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsInsertAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        $returnType = '\Swagger\Client\Model\Caption';
        $request = $this->youtubeCaptionsInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeCaptionsInsert'
     *
     * @param  string $part The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.  You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeCaptionsInsertRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeCaptionsInsert'
            );
        }

        $resourcePath = '/captions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($on_behalf_of !== null) {
            $queryParams['onBehalfOf'] = ObjectSerializer::toQueryValue($on_behalf_of);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($sync !== null) {
            $queryParams['sync'] = ObjectSerializer::toQueryValue($sync);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/octet-stream', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeCaptionsList
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet. (required)
     * @param  string $video_id The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is on behalf of. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CaptionListResponse
     */
    public function youtubeCaptionsList($part, $video_id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $id = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        list($response) = $this->youtubeCaptionsListWithHttpInfo($part, $video_id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $id, $on_behalf_of, $on_behalf_of_content_owner);
        return $response;
    }

    /**
     * Operation youtubeCaptionsListWithHttpInfo
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet. (required)
     * @param  string $video_id The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is on behalf of. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CaptionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeCaptionsListWithHttpInfo($part, $video_id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $id = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\CaptionListResponse';
        $request = $this->youtubeCaptionsListRequest($part, $video_id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $id, $on_behalf_of, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CaptionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeCaptionsListAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet. (required)
     * @param  string $video_id The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is on behalf of. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsListAsync($part, $video_id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $id = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeCaptionsListAsyncWithHttpInfo($part, $video_id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $id, $on_behalf_of, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeCaptionsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet. (required)
     * @param  string $video_id The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is on behalf of. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsListAsyncWithHttpInfo($part, $video_id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $id = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\CaptionListResponse';
        $request = $this->youtubeCaptionsListRequest($part, $video_id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $id, $on_behalf_of, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeCaptionsList'
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet. (required)
     * @param  string $video_id The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video. (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is on behalf of. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeCaptionsListRequest($part, $video_id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $id = null, $on_behalf_of = null, $on_behalf_of_content_owner = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeCaptionsList'
            );
        }
        // verify the required parameter 'video_id' is set
        if ($video_id === null || (is_array($video_id) && count($video_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $video_id when calling youtubeCaptionsList'
            );
        }

        $resourcePath = '/captions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($on_behalf_of !== null) {
            $queryParams['onBehalfOf'] = ObjectSerializer::toQueryValue($on_behalf_of);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($video_id !== null) {
            $queryParams['videoId'] = ObjectSerializer::toQueryValue($video_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeCaptionsUpdate
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track&#39;s draft status. Otherwise, set the property value to id. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync Note: The API server only processes the parameter value if the request contains an updated caption file.  The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Caption
     */
    public function youtubeCaptionsUpdate($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        list($response) = $this->youtubeCaptionsUpdateWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);
        return $response;
    }

    /**
     * Operation youtubeCaptionsUpdateWithHttpInfo
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track&#39;s draft status. Otherwise, set the property value to id. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync Note: The API server only processes the parameter value if the request contains an updated caption file.  The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Caption, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeCaptionsUpdateWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        $returnType = '\Swagger\Client\Model\Caption';
        $request = $this->youtubeCaptionsUpdateRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Caption',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeCaptionsUpdateAsync
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track&#39;s draft status. Otherwise, set the property value to id. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync Note: The API server only processes the parameter value if the request contains an updated caption file.  The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsUpdateAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        return $this->youtubeCaptionsUpdateAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeCaptionsUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track&#39;s draft status. Otherwise, set the property value to id. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync Note: The API server only processes the parameter value if the request contains an updated caption file.  The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeCaptionsUpdateAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        $returnType = '\Swagger\Client\Model\Caption';
        $request = $this->youtubeCaptionsUpdateRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of, $on_behalf_of_content_owner, $sync);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeCaptionsUpdate'
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track&#39;s draft status. Otherwise, set the property value to id. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Caption $body (optional)
     * @param  string $on_behalf_of ID of the Google+ Page for the channel that the request is be on behalf of (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  bool $sync Note: The API server only processes the parameter value if the request contains an updated caption file.  The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeCaptionsUpdateRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of = null, $on_behalf_of_content_owner = null, $sync = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeCaptionsUpdate'
            );
        }

        $resourcePath = '/captions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($on_behalf_of !== null) {
            $queryParams['onBehalfOf'] = ObjectSerializer::toQueryValue($on_behalf_of);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($sync !== null) {
            $queryParams['sync'] = ObjectSerializer::toQueryValue($sync);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/octet-stream', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
