<?php
/**
 * VideosApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VideosApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideosApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation youtubeVideosDelete
     *
     * @param  string $id The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeVideosDelete($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        $this->youtubeVideosDeleteWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);
    }

    /**
     * Operation youtubeVideosDeleteWithHttpInfo
     *
     * @param  string $id The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosDeleteWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosDeleteAsync
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosDeleteAsync($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeVideosDeleteAsyncWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosDeleteAsyncWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosDeleteRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosDelete'
     *
     * @param  string $id The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosDeleteRequest($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeVideosDelete'
            );
        }

        $resourcePath = '/videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosGetRating
     *
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoGetRatingResponse
     */
    public function youtubeVideosGetRating($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        list($response) = $this->youtubeVideosGetRatingWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);
        return $response;
    }

    /**
     * Operation youtubeVideosGetRatingWithHttpInfo
     *
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoGetRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosGetRatingWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\VideoGetRatingResponse';
        $request = $this->youtubeVideosGetRatingRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoGetRatingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosGetRatingAsync
     *
     * 
     *
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosGetRatingAsync($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeVideosGetRatingAsyncWithHttpInfo($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosGetRatingAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosGetRatingAsyncWithHttpInfo($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\VideoGetRatingResponse';
        $request = $this->youtubeVideosGetRatingRequest($id, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosGetRating'
     *
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video&#39;s ID. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosGetRatingRequest($id, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $on_behalf_of_content_owner = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeVideosGetRating'
            );
        }

        $resourcePath = '/videos/getRating';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosInsert
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  bool $auto_levels The autoLevels parameter indicates whether YouTube should automatically enhance the video&#39;s lighting and color. (optional)
     * @param  \Swagger\Client\Model\Video $body body (optional)
     * @param  bool $notify_subscribers The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video&#39;s channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel&#39;s subscribers. (optional, default to true)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  bool $stabilize The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Video
     */
    public function youtubeVideosInsert($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $auto_levels = null, $body = null, $notify_subscribers = 'true', $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $stabilize = null)
    {
        list($response) = $this->youtubeVideosInsertWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $auto_levels, $body, $notify_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $stabilize);
        return $response;
    }

    /**
     * Operation youtubeVideosInsertWithHttpInfo
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  bool $auto_levels The autoLevels parameter indicates whether YouTube should automatically enhance the video&#39;s lighting and color. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  bool $notify_subscribers The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video&#39;s channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel&#39;s subscribers. (optional, default to true)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  bool $stabilize The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Video, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosInsertWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $auto_levels = null, $body = null, $notify_subscribers = 'true', $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $stabilize = null)
    {
        $returnType = '\Swagger\Client\Model\Video';
        $request = $this->youtubeVideosInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $auto_levels, $body, $notify_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $stabilize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Video',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosInsertAsync
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  bool $auto_levels The autoLevels parameter indicates whether YouTube should automatically enhance the video&#39;s lighting and color. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  bool $notify_subscribers The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video&#39;s channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel&#39;s subscribers. (optional, default to true)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  bool $stabilize The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosInsertAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $auto_levels = null, $body = null, $notify_subscribers = 'true', $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $stabilize = null)
    {
        return $this->youtubeVideosInsertAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $auto_levels, $body, $notify_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $stabilize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosInsertAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  bool $auto_levels The autoLevels parameter indicates whether YouTube should automatically enhance the video&#39;s lighting and color. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  bool $notify_subscribers The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video&#39;s channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel&#39;s subscribers. (optional, default to true)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  bool $stabilize The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosInsertAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $auto_levels = null, $body = null, $notify_subscribers = 'true', $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $stabilize = null)
    {
        $returnType = '\Swagger\Client\Model\Video';
        $request = $this->youtubeVideosInsertRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $auto_levels, $body, $notify_subscribers, $on_behalf_of_content_owner, $on_behalf_of_content_owner_channel, $stabilize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosInsert'
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  bool $auto_levels The autoLevels parameter indicates whether YouTube should automatically enhance the video&#39;s lighting and color. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  bool $notify_subscribers The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video&#39;s channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel&#39;s subscribers. (optional, default to true)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $on_behalf_of_content_owner_channel This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.  This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel. (optional)
     * @param  bool $stabilize The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosInsertRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $auto_levels = null, $body = null, $notify_subscribers = 'true', $on_behalf_of_content_owner = null, $on_behalf_of_content_owner_channel = null, $stabilize = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeVideosInsert'
            );
        }

        $resourcePath = '/videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($auto_levels !== null) {
            $queryParams['autoLevels'] = ObjectSerializer::toQueryValue($auto_levels);
        }
        // query params
        if ($notify_subscribers !== null) {
            $queryParams['notifySubscribers'] = ObjectSerializer::toQueryValue($notify_subscribers);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($on_behalf_of_content_owner_channel !== null) {
            $queryParams['onBehalfOfContentOwnerChannel'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner_channel);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($stabilize !== null) {
            $queryParams['stabilize'] = ObjectSerializer::toQueryValue($stabilize);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/octet-stream', 'video/1d-interleaved-parityfec', 'video/3gpp', 'video/3gpp-tt', 'video/3gpp2', 'video/bmpeg', 'video/bt656', 'video/celb', 'video/dv', 'video/encaprtp', 'video/h261', 'video/h263', 'video/h263-1998', 'video/h263-2000', 'video/h264', 'video/h264-rcdo', 'video/h264-svc', 'video/h265', 'video/iso.segment', 'video/jpeg', 'video/jpeg2000', 'video/jpm', 'video/mj2', 'video/mp1s', 'video/mp2p', 'video/mp2t', 'video/mp4', 'video/mp4v-es', 'video/mpeg', 'video/mpeg4-generic', 'video/mpv', 'video/nv', 'video/ogg', 'video/parityfec', 'video/pointer', 'video/quicktime', 'video/raptorfec', 'video/raw', 'video/rtp-enc-aescm128', 'video/rtploopback', 'video/rtx', 'video/smpte292m', 'video/ulpfec', 'video/vc1', 'video/vnd.cctv', 'video/vnd.dece.hd', 'video/vnd.dece.mobile', 'video/vnd.dece.mp4', 'video/vnd.dece.pd', 'video/vnd.dece.sd', 'video/vnd.dece.video', 'video/vnd.directv.mpeg', 'video/vnd.directv.mpeg-tts', 'video/vnd.dlna.mpeg-tts', 'video/vnd.dvb.file', 'video/vnd.fvt', 'video/vnd.hns.video', 'video/vnd.iptvforum.1dparityfec-1010', 'video/vnd.iptvforum.1dparityfec-2005', 'video/vnd.iptvforum.2dparityfec-1010', 'video/vnd.iptvforum.2dparityfec-2005', 'video/vnd.iptvforum.ttsavc', 'video/vnd.iptvforum.ttsmpeg2', 'video/vnd.motorola.video', 'video/vnd.motorola.videop', 'video/vnd.mpegurl', 'video/vnd.ms-playready.media.pyv', 'video/vnd.nokia.interleaved-multimedia', 'video/vnd.nokia.videovoip', 'video/vnd.objectvideo', 'video/vnd.radgamettools.bink', 'video/vnd.radgamettools.smacker', 'video/vnd.sealed.mpeg1', 'video/vnd.sealed.mpeg4', 'video/vnd.sealed.swf', 'video/vnd.sealedmedia.softseal.mov', 'video/vnd.uvvu.mp4', 'video/vnd.vivo', 'video/vp8', 'video/webm', 'video/x-f4v', 'video/x-fli', 'video/x-flv', 'video/x-m4v', 'video/x-matroska', 'video/x-mng', 'video/x-ms-asf', 'video/x-ms-vob', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wmx', 'video/x-ms-wvx', 'video/x-msvideo', 'video/x-sgi-movie', 'video/x-smv']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosList
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part&#x3D;snippet, the API response will contain all of those properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $chart The chart parameter identifies the chart that you want to retrieve. (optional)
     * @param  string $hl The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.  If localized resource details are available in that language, the resource&#39;s snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource&#39;s default language. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video&#39;s ID. (optional)
     * @param  string $locale DEPRECATED (optional)
     * @param  int $max_height The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional, default to 5)
     * @param  int $max_width The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request. (optional)
     * @param  string $my_rating Set this parameter&#39;s value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $video_category_id The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoListResponse
     */
    public function youtubeVideosList($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $chart = null, $hl = null, $id = null, $locale = null, $max_height = null, $max_results = '5', $max_width = null, $my_rating = null, $on_behalf_of_content_owner = null, $page_token = null, $region_code = null, $video_category_id = '0')
    {
        list($response) = $this->youtubeVideosListWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $chart, $hl, $id, $locale, $max_height, $max_results, $max_width, $my_rating, $on_behalf_of_content_owner, $page_token, $region_code, $video_category_id);
        return $response;
    }

    /**
     * Operation youtubeVideosListWithHttpInfo
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part&#x3D;snippet, the API response will contain all of those properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $chart The chart parameter identifies the chart that you want to retrieve. (optional)
     * @param  string $hl The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.  If localized resource details are available in that language, the resource&#39;s snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource&#39;s default language. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video&#39;s ID. (optional)
     * @param  string $locale DEPRECATED (optional)
     * @param  int $max_height The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional, default to 5)
     * @param  int $max_width The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request. (optional)
     * @param  string $my_rating Set this parameter&#39;s value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $video_category_id The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosListWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $chart = null, $hl = null, $id = null, $locale = null, $max_height = null, $max_results = '5', $max_width = null, $my_rating = null, $on_behalf_of_content_owner = null, $page_token = null, $region_code = null, $video_category_id = '0')
    {
        $returnType = '\Swagger\Client\Model\VideoListResponse';
        $request = $this->youtubeVideosListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $chart, $hl, $id, $locale, $max_height, $max_results, $max_width, $my_rating, $on_behalf_of_content_owner, $page_token, $region_code, $video_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosListAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part&#x3D;snippet, the API response will contain all of those properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $chart The chart parameter identifies the chart that you want to retrieve. (optional)
     * @param  string $hl The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.  If localized resource details are available in that language, the resource&#39;s snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource&#39;s default language. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video&#39;s ID. (optional)
     * @param  string $locale DEPRECATED (optional)
     * @param  int $max_height The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional, default to 5)
     * @param  int $max_width The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request. (optional)
     * @param  string $my_rating Set this parameter&#39;s value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $video_category_id The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosListAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $chart = null, $hl = null, $id = null, $locale = null, $max_height = null, $max_results = '5', $max_width = null, $my_rating = null, $on_behalf_of_content_owner = null, $page_token = null, $region_code = null, $video_category_id = '0')
    {
        return $this->youtubeVideosListAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $chart, $hl, $id, $locale, $max_height, $max_results, $max_width, $my_rating, $on_behalf_of_content_owner, $page_token, $region_code, $video_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part&#x3D;snippet, the API response will contain all of those properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $chart The chart parameter identifies the chart that you want to retrieve. (optional)
     * @param  string $hl The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.  If localized resource details are available in that language, the resource&#39;s snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource&#39;s default language. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video&#39;s ID. (optional)
     * @param  string $locale DEPRECATED (optional)
     * @param  int $max_height The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional, default to 5)
     * @param  int $max_width The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request. (optional)
     * @param  string $my_rating Set this parameter&#39;s value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $video_category_id The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosListAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $chart = null, $hl = null, $id = null, $locale = null, $max_height = null, $max_results = '5', $max_width = null, $my_rating = null, $on_behalf_of_content_owner = null, $page_token = null, $region_code = null, $video_category_id = '0')
    {
        $returnType = '\Swagger\Client\Model\VideoListResponse';
        $request = $this->youtubeVideosListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $chart, $hl, $id, $locale, $max_height, $max_results, $max_width, $my_rating, $on_behalf_of_content_owner, $page_token, $region_code, $video_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosList'
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.  If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part&#x3D;snippet, the API response will contain all of those properties. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $chart The chart parameter identifies the chart that you want to retrieve. (optional)
     * @param  string $hl The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.  If localized resource details are available in that language, the resource&#39;s snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource&#39;s default language. (optional)
     * @param  string $id The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video&#39;s ID. (optional)
     * @param  string $locale DEPRECATED (optional)
     * @param  int $max_height The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional, default to 5)
     * @param  int $max_width The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request. (optional)
     * @param  string $my_rating Set this parameter&#39;s value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user. (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.  Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $video_category_id The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosListRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $chart = null, $hl = null, $id = null, $locale = null, $max_height = null, $max_results = '5', $max_width = null, $my_rating = null, $on_behalf_of_content_owner = null, $page_token = null, $region_code = null, $video_category_id = '0')
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeVideosList'
            );
        }
        if ($max_height !== null && $max_height > 8192) {
            throw new \InvalidArgumentException('invalid value for "$max_height" when calling VideosApi.youtubeVideosList, must be smaller than or equal to 8192.');
        }
        if ($max_height !== null && $max_height < 72) {
            throw new \InvalidArgumentException('invalid value for "$max_height" when calling VideosApi.youtubeVideosList, must be bigger than or equal to 72.');
        }

        if ($max_results !== null && $max_results > 50) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling VideosApi.youtubeVideosList, must be smaller than or equal to 50.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling VideosApi.youtubeVideosList, must be bigger than or equal to 1.');
        }

        if ($max_width !== null && $max_width > 8192) {
            throw new \InvalidArgumentException('invalid value for "$max_width" when calling VideosApi.youtubeVideosList, must be smaller than or equal to 8192.');
        }
        if ($max_width !== null && $max_width < 72) {
            throw new \InvalidArgumentException('invalid value for "$max_width" when calling VideosApi.youtubeVideosList, must be bigger than or equal to 72.');
        }


        $resourcePath = '/videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($chart !== null) {
            $queryParams['chart'] = ObjectSerializer::toQueryValue($chart);
        }
        // query params
        if ($hl !== null) {
            $queryParams['hl'] = ObjectSerializer::toQueryValue($hl);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($max_height !== null) {
            $queryParams['maxHeight'] = ObjectSerializer::toQueryValue($max_height);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results);
        }
        // query params
        if ($max_width !== null) {
            $queryParams['maxWidth'] = ObjectSerializer::toQueryValue($max_width);
        }
        // query params
        if ($my_rating !== null) {
            $queryParams['myRating'] = ObjectSerializer::toQueryValue($my_rating);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($region_code !== null) {
            $queryParams['regionCode'] = ObjectSerializer::toQueryValue($region_code);
        }
        // query params
        if ($video_category_id !== null) {
            $queryParams['videoCategoryId'] = ObjectSerializer::toQueryValue($video_category_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosRate
     *
     * @param  string $id The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed. (required)
     * @param  string $rating Specifies the rating to record. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeVideosRate($id, $rating, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $this->youtubeVideosRateWithHttpInfo($id, $rating, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);
    }

    /**
     * Operation youtubeVideosRateWithHttpInfo
     *
     * @param  string $id The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed. (required)
     * @param  string $rating Specifies the rating to record. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosRateWithHttpInfo($id, $rating, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosRateRequest($id, $rating, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosRateAsync
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed. (required)
     * @param  string $rating Specifies the rating to record. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosRateAsync($id, $rating, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        return $this->youtubeVideosRateAsyncWithHttpInfo($id, $rating, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosRateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed. (required)
     * @param  string $rating Specifies the rating to record. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosRateAsyncWithHttpInfo($id, $rating, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosRateRequest($id, $rating, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosRate'
     *
     * @param  string $id The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed. (required)
     * @param  string $rating Specifies the rating to record. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosRateRequest($id, $rating, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling youtubeVideosRate'
            );
        }
        // verify the required parameter 'rating' is set
        if ($rating === null || (is_array($rating) && count($rating) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating when calling youtubeVideosRate'
            );
        }

        $resourcePath = '/videos/rate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = ObjectSerializer::toQueryValue($rating);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosReportAbuse
     *
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\VideoAbuseReport $body body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function youtubeVideosReportAbuse($alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        $this->youtubeVideosReportAbuseWithHttpInfo($alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);
    }

    /**
     * Operation youtubeVideosReportAbuseWithHttpInfo
     *
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\VideoAbuseReport $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosReportAbuseWithHttpInfo($alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosReportAbuseRequest($alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosReportAbuseAsync
     *
     * 
     *
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\VideoAbuseReport $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosReportAbuseAsync($alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeVideosReportAbuseAsyncWithHttpInfo($alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosReportAbuseAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\VideoAbuseReport $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosReportAbuseAsyncWithHttpInfo($alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '';
        $request = $this->youtubeVideosReportAbuseRequest($alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosReportAbuse'
     *
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\VideoAbuseReport $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosReportAbuseRequest($alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {

        $resourcePath = '/videos/reportAbuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation youtubeVideosUpdate
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video&#39;s privacy setting is contained in the status part. As such, if your request is updating a private video, and the request&#39;s part parameter value includes the status part, the video&#39;s privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.  In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Video $body body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Video
     */
    public function youtubeVideosUpdate($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        list($response) = $this->youtubeVideosUpdateWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);
        return $response;
    }

    /**
     * Operation youtubeVideosUpdateWithHttpInfo
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video&#39;s privacy setting is contained in the status part. As such, if your request is updating a private video, and the request&#39;s part parameter value includes the status part, the video&#39;s privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.  In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Video, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeVideosUpdateWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\Video';
        $request = $this->youtubeVideosUpdateRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Video',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeVideosUpdateAsync
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video&#39;s privacy setting is contained in the status part. As such, if your request is updating a private video, and the request&#39;s part parameter value includes the status part, the video&#39;s privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.  In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosUpdateAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        return $this->youtubeVideosUpdateAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeVideosUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video&#39;s privacy setting is contained in the status part. As such, if your request is updating a private video, and the request&#39;s part parameter value includes the status part, the video&#39;s privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.  In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeVideosUpdateAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        $returnType = '\Swagger\Client\Model\Video';
        $request = $this->youtubeVideosUpdateRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $body, $on_behalf_of_content_owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeVideosUpdate'
     *
     * @param  string $part The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.  Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video&#39;s privacy setting is contained in the status part. As such, if your request is updating a private video, and the request&#39;s part parameter value includes the status part, the video&#39;s privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.  In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  \Swagger\Client\Model\Video $body (optional)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeVideosUpdateRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $body = null, $on_behalf_of_content_owner = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeVideosUpdate'
            );
        }

        $resourcePath = '/videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
