<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YouTube Data
 *
 * Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation youtubeSearchList
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter indicates that the API response should only contain resources created by the channel (optional)
     * @param  string $channel_type The channelType parameter lets you restrict a search to a particular type of channel. (optional)
     * @param  string $event_type The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  bool $for_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided. (optional)
     * @param  bool $for_developer The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer&#39;s application or website. The API server uses the request&#39;s authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer&#39;s own app or website but not to videos uploaded through other apps or sites. (optional)
     * @param  bool $for_mine The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter&#39;s value must also be set to video. (optional)
     * @param  string $location The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).   - The location parameter value identifies the point at the center of the area. - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter. (optional)
     * @param  string $location_radius The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.  The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.  Note: See the definition of the location parameter for more information. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $order The order parameter specifies the method that will be used to order resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $published_before The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $q The q parameter specifies the query term to search for.  Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot;, set the q parameter value to boating|sailing. Similarly, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot; but not \&quot;fishing\&quot;, set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $related_to_video_id The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video. (optional)
     * @param  string $relevance_language The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term. (optional)
     * @param  string $safe_search The safeSearch parameter indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param  string $topic_id The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID. (optional)
     * @param  string $type The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. (optional, default to video,channel,playlist)
     * @param  string $video_caption The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_category_id The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_definition The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_dimension The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_duration The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_embeddable The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_license The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_syndicated The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_type The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SearchListResponse
     */
    public function youtubeSearchList($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $channel_type = null, $event_type = null, $for_content_owner = null, $for_developer = null, $for_mine = null, $location = null, $location_radius = null, $max_results = '5', $on_behalf_of_content_owner = null, $order = 'relevance', $page_token = null, $published_after = null, $published_before = null, $q = null, $region_code = null, $related_to_video_id = null, $relevance_language = null, $safe_search = null, $topic_id = null, $type = 'video,channel,playlist', $video_caption = null, $video_category_id = null, $video_definition = null, $video_dimension = null, $video_duration = null, $video_embeddable = null, $video_license = null, $video_syndicated = null, $video_type = null)
    {
        list($response) = $this->youtubeSearchListWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $channel_type, $event_type, $for_content_owner, $for_developer, $for_mine, $location, $location_radius, $max_results, $on_behalf_of_content_owner, $order, $page_token, $published_after, $published_before, $q, $region_code, $related_to_video_id, $relevance_language, $safe_search, $topic_id, $type, $video_caption, $video_category_id, $video_definition, $video_dimension, $video_duration, $video_embeddable, $video_license, $video_syndicated, $video_type);
        return $response;
    }

    /**
     * Operation youtubeSearchListWithHttpInfo
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter indicates that the API response should only contain resources created by the channel (optional)
     * @param  string $channel_type The channelType parameter lets you restrict a search to a particular type of channel. (optional)
     * @param  string $event_type The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  bool $for_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided. (optional)
     * @param  bool $for_developer The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer&#39;s application or website. The API server uses the request&#39;s authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer&#39;s own app or website but not to videos uploaded through other apps or sites. (optional)
     * @param  bool $for_mine The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter&#39;s value must also be set to video. (optional)
     * @param  string $location The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).   - The location parameter value identifies the point at the center of the area. - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter. (optional)
     * @param  string $location_radius The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.  The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.  Note: See the definition of the location parameter for more information. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $order The order parameter specifies the method that will be used to order resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $published_before The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $q The q parameter specifies the query term to search for.  Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot;, set the q parameter value to boating|sailing. Similarly, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot; but not \&quot;fishing\&quot;, set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $related_to_video_id The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video. (optional)
     * @param  string $relevance_language The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term. (optional)
     * @param  string $safe_search The safeSearch parameter indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param  string $topic_id The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID. (optional)
     * @param  string $type The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. (optional, default to video,channel,playlist)
     * @param  string $video_caption The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_category_id The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_definition The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_dimension The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_duration The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_embeddable The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_license The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_syndicated The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_type The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SearchListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function youtubeSearchListWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $channel_type = null, $event_type = null, $for_content_owner = null, $for_developer = null, $for_mine = null, $location = null, $location_radius = null, $max_results = '5', $on_behalf_of_content_owner = null, $order = 'relevance', $page_token = null, $published_after = null, $published_before = null, $q = null, $region_code = null, $related_to_video_id = null, $relevance_language = null, $safe_search = null, $topic_id = null, $type = 'video,channel,playlist', $video_caption = null, $video_category_id = null, $video_definition = null, $video_dimension = null, $video_duration = null, $video_embeddable = null, $video_license = null, $video_syndicated = null, $video_type = null)
    {
        $returnType = '\Swagger\Client\Model\SearchListResponse';
        $request = $this->youtubeSearchListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $channel_type, $event_type, $for_content_owner, $for_developer, $for_mine, $location, $location_radius, $max_results, $on_behalf_of_content_owner, $order, $page_token, $published_after, $published_before, $q, $region_code, $related_to_video_id, $relevance_language, $safe_search, $topic_id, $type, $video_caption, $video_category_id, $video_definition, $video_dimension, $video_duration, $video_embeddable, $video_license, $video_syndicated, $video_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SearchListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation youtubeSearchListAsync
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter indicates that the API response should only contain resources created by the channel (optional)
     * @param  string $channel_type The channelType parameter lets you restrict a search to a particular type of channel. (optional)
     * @param  string $event_type The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  bool $for_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided. (optional)
     * @param  bool $for_developer The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer&#39;s application or website. The API server uses the request&#39;s authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer&#39;s own app or website but not to videos uploaded through other apps or sites. (optional)
     * @param  bool $for_mine The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter&#39;s value must also be set to video. (optional)
     * @param  string $location The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).   - The location parameter value identifies the point at the center of the area. - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter. (optional)
     * @param  string $location_radius The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.  The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.  Note: See the definition of the location parameter for more information. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $order The order parameter specifies the method that will be used to order resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $published_before The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $q The q parameter specifies the query term to search for.  Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot;, set the q parameter value to boating|sailing. Similarly, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot; but not \&quot;fishing\&quot;, set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $related_to_video_id The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video. (optional)
     * @param  string $relevance_language The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term. (optional)
     * @param  string $safe_search The safeSearch parameter indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param  string $topic_id The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID. (optional)
     * @param  string $type The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. (optional, default to video,channel,playlist)
     * @param  string $video_caption The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_category_id The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_definition The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_dimension The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_duration The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_embeddable The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_license The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_syndicated The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_type The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSearchListAsync($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $channel_type = null, $event_type = null, $for_content_owner = null, $for_developer = null, $for_mine = null, $location = null, $location_radius = null, $max_results = '5', $on_behalf_of_content_owner = null, $order = 'relevance', $page_token = null, $published_after = null, $published_before = null, $q = null, $region_code = null, $related_to_video_id = null, $relevance_language = null, $safe_search = null, $topic_id = null, $type = 'video,channel,playlist', $video_caption = null, $video_category_id = null, $video_definition = null, $video_dimension = null, $video_duration = null, $video_embeddable = null, $video_license = null, $video_syndicated = null, $video_type = null)
    {
        return $this->youtubeSearchListAsyncWithHttpInfo($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $channel_type, $event_type, $for_content_owner, $for_developer, $for_mine, $location, $location_radius, $max_results, $on_behalf_of_content_owner, $order, $page_token, $published_after, $published_before, $q, $region_code, $related_to_video_id, $relevance_language, $safe_search, $topic_id, $type, $video_caption, $video_category_id, $video_definition, $video_dimension, $video_duration, $video_embeddable, $video_license, $video_syndicated, $video_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation youtubeSearchListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter indicates that the API response should only contain resources created by the channel (optional)
     * @param  string $channel_type The channelType parameter lets you restrict a search to a particular type of channel. (optional)
     * @param  string $event_type The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  bool $for_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided. (optional)
     * @param  bool $for_developer The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer&#39;s application or website. The API server uses the request&#39;s authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer&#39;s own app or website but not to videos uploaded through other apps or sites. (optional)
     * @param  bool $for_mine The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter&#39;s value must also be set to video. (optional)
     * @param  string $location The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).   - The location parameter value identifies the point at the center of the area. - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter. (optional)
     * @param  string $location_radius The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.  The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.  Note: See the definition of the location parameter for more information. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $order The order parameter specifies the method that will be used to order resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $published_before The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $q The q parameter specifies the query term to search for.  Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot;, set the q parameter value to boating|sailing. Similarly, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot; but not \&quot;fishing\&quot;, set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $related_to_video_id The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video. (optional)
     * @param  string $relevance_language The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term. (optional)
     * @param  string $safe_search The safeSearch parameter indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param  string $topic_id The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID. (optional)
     * @param  string $type The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. (optional, default to video,channel,playlist)
     * @param  string $video_caption The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_category_id The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_definition The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_dimension The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_duration The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_embeddable The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_license The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_syndicated The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_type The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function youtubeSearchListAsyncWithHttpInfo($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $channel_type = null, $event_type = null, $for_content_owner = null, $for_developer = null, $for_mine = null, $location = null, $location_radius = null, $max_results = '5', $on_behalf_of_content_owner = null, $order = 'relevance', $page_token = null, $published_after = null, $published_before = null, $q = null, $region_code = null, $related_to_video_id = null, $relevance_language = null, $safe_search = null, $topic_id = null, $type = 'video,channel,playlist', $video_caption = null, $video_category_id = null, $video_definition = null, $video_dimension = null, $video_duration = null, $video_embeddable = null, $video_license = null, $video_syndicated = null, $video_type = null)
    {
        $returnType = '\Swagger\Client\Model\SearchListResponse';
        $request = $this->youtubeSearchListRequest($part, $alt, $fields, $key, $oauth_token, $pretty_print, $quota_user, $user_ip, $channel_id, $channel_type, $event_type, $for_content_owner, $for_developer, $for_mine, $location, $location_radius, $max_results, $on_behalf_of_content_owner, $order, $page_token, $published_after, $published_before, $q, $region_code, $related_to_video_id, $relevance_language, $safe_search, $topic_id, $type, $video_caption, $video_category_id, $video_definition, $video_dimension, $video_duration, $video_embeddable, $video_license, $video_syndicated, $video_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'youtubeSearchList'
     *
     * @param  string $part The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param  string $alt Data format for the response. (optional, default to json)
     * @param  string $fields Selector specifying which fields to include in a partial response. (optional)
     * @param  string $key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param  string $oauth_token OAuth 2.0 token for the current user. (optional)
     * @param  bool $pretty_print Returns response with indentations and line breaks. (optional, default to true)
     * @param  string $quota_user Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)
     * @param  string $user_ip IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)
     * @param  string $channel_id The channelId parameter indicates that the API response should only contain resources created by the channel (optional)
     * @param  string $channel_type The channelType parameter lets you restrict a search to a particular type of channel. (optional)
     * @param  string $event_type The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  bool $for_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided. (optional)
     * @param  bool $for_developer The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer&#39;s application or website. The API server uses the request&#39;s authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer&#39;s own app or website but not to videos uploaded through other apps or sites. (optional)
     * @param  bool $for_mine The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter&#39;s value must also be set to video. (optional)
     * @param  string $location The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).   - The location parameter value identifies the point at the center of the area. - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter. (optional)
     * @param  string $location_radius The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.  The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.  Note: See the definition of the location parameter for more information. (optional)
     * @param  int $max_results The maxResults parameter specifies the maximum number of items that should be returned in the result set. (optional, default to 5)
     * @param  string $on_behalf_of_content_owner Note: This parameter is intended exclusively for YouTube content partners.  The onBehalfOfContentOwner parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param  string $order The order parameter specifies the method that will be used to order resources in the API response. (optional, default to relevance)
     * @param  string $page_token The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param  string $published_after The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $published_before The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z). (optional)
     * @param  string $q The q parameter specifies the query term to search for.  Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot;, set the q parameter value to boating|sailing. Similarly, to search for videos matching either \&quot;boating\&quot; or \&quot;sailing\&quot; but not \&quot;fishing\&quot;, set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C. (optional)
     * @param  string $region_code The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. (optional)
     * @param  string $related_to_video_id The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video. (optional)
     * @param  string $relevance_language The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term. (optional)
     * @param  string $safe_search The safeSearch parameter indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param  string $topic_id The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID. (optional)
     * @param  string $type The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. (optional, default to video,channel,playlist)
     * @param  string $video_caption The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_category_id The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_definition The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_dimension The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_duration The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_embeddable The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_license The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_syndicated The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     * @param  string $video_type The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter&#39;s value to video. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function youtubeSearchListRequest($part, $alt = 'json', $fields = null, $key = null, $oauth_token = null, $pretty_print = 'true', $quota_user = null, $user_ip = null, $channel_id = null, $channel_type = null, $event_type = null, $for_content_owner = null, $for_developer = null, $for_mine = null, $location = null, $location_radius = null, $max_results = '5', $on_behalf_of_content_owner = null, $order = 'relevance', $page_token = null, $published_after = null, $published_before = null, $q = null, $region_code = null, $related_to_video_id = null, $relevance_language = null, $safe_search = null, $topic_id = null, $type = 'video,channel,playlist', $video_caption = null, $video_category_id = null, $video_definition = null, $video_dimension = null, $video_duration = null, $video_embeddable = null, $video_license = null, $video_syndicated = null, $video_type = null)
    {
        // verify the required parameter 'part' is set
        if ($part === null || (is_array($part) && count($part) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $part when calling youtubeSearchList'
            );
        }
        if ($max_results !== null && $max_results > 50) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling SearchApi.youtubeSearchList, must be smaller than or equal to 50.');
        }
        if ($max_results !== null && $max_results < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling SearchApi.youtubeSearchList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alt !== null) {
            $queryParams['alt'] = ObjectSerializer::toQueryValue($alt);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($pretty_print !== null) {
            $queryParams['prettyPrint'] = ObjectSerializer::toQueryValue($pretty_print);
        }
        // query params
        if ($quota_user !== null) {
            $queryParams['quotaUser'] = ObjectSerializer::toQueryValue($quota_user);
        }
        // query params
        if ($user_ip !== null) {
            $queryParams['userIp'] = ObjectSerializer::toQueryValue($user_ip);
        }
        // query params
        if ($channel_id !== null) {
            $queryParams['channelId'] = ObjectSerializer::toQueryValue($channel_id);
        }
        // query params
        if ($channel_type !== null) {
            $queryParams['channelType'] = ObjectSerializer::toQueryValue($channel_type);
        }
        // query params
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($for_content_owner !== null) {
            $queryParams['forContentOwner'] = ObjectSerializer::toQueryValue($for_content_owner);
        }
        // query params
        if ($for_developer !== null) {
            $queryParams['forDeveloper'] = ObjectSerializer::toQueryValue($for_developer);
        }
        // query params
        if ($for_mine !== null) {
            $queryParams['forMine'] = ObjectSerializer::toQueryValue($for_mine);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($location_radius !== null) {
            $queryParams['locationRadius'] = ObjectSerializer::toQueryValue($location_radius);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results);
        }
        // query params
        if ($on_behalf_of_content_owner !== null) {
            $queryParams['onBehalfOfContentOwner'] = ObjectSerializer::toQueryValue($on_behalf_of_content_owner);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }
        // query params
        if ($part !== null) {
            $queryParams['part'] = ObjectSerializer::toQueryValue($part);
        }
        // query params
        if ($published_after !== null) {
            $queryParams['publishedAfter'] = ObjectSerializer::toQueryValue($published_after);
        }
        // query params
        if ($published_before !== null) {
            $queryParams['publishedBefore'] = ObjectSerializer::toQueryValue($published_before);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($region_code !== null) {
            $queryParams['regionCode'] = ObjectSerializer::toQueryValue($region_code);
        }
        // query params
        if ($related_to_video_id !== null) {
            $queryParams['relatedToVideoId'] = ObjectSerializer::toQueryValue($related_to_video_id);
        }
        // query params
        if ($relevance_language !== null) {
            $queryParams['relevanceLanguage'] = ObjectSerializer::toQueryValue($relevance_language);
        }
        // query params
        if ($safe_search !== null) {
            $queryParams['safeSearch'] = ObjectSerializer::toQueryValue($safe_search);
        }
        // query params
        if ($topic_id !== null) {
            $queryParams['topicId'] = ObjectSerializer::toQueryValue($topic_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($video_caption !== null) {
            $queryParams['videoCaption'] = ObjectSerializer::toQueryValue($video_caption);
        }
        // query params
        if ($video_category_id !== null) {
            $queryParams['videoCategoryId'] = ObjectSerializer::toQueryValue($video_category_id);
        }
        // query params
        if ($video_definition !== null) {
            $queryParams['videoDefinition'] = ObjectSerializer::toQueryValue($video_definition);
        }
        // query params
        if ($video_dimension !== null) {
            $queryParams['videoDimension'] = ObjectSerializer::toQueryValue($video_dimension);
        }
        // query params
        if ($video_duration !== null) {
            $queryParams['videoDuration'] = ObjectSerializer::toQueryValue($video_duration);
        }
        // query params
        if ($video_embeddable !== null) {
            $queryParams['videoEmbeddable'] = ObjectSerializer::toQueryValue($video_embeddable);
        }
        // query params
        if ($video_license !== null) {
            $queryParams['videoLicense'] = ObjectSerializer::toQueryValue($video_license);
        }
        // query params
        if ($video_syndicated !== null) {
            $queryParams['videoSyndicated'] = ObjectSerializer::toQueryValue($video_syndicated);
        }
        // query params
        if ($video_type !== null) {
            $queryParams['videoType'] = ObjectSerializer::toQueryValue($video_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
